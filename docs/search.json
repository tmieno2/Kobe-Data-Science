[
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "08-1: Making Tables with flextable",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20)\n\n\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-1",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-1",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat)\n\n\n\n\n                    am carb gear  mpg drat\nMazda RX4            1    4    4 21.0 3.90\nMazda RX4 Wag        1    4    4 21.0 3.90\nDatsun 710           1    1    4 22.8 3.85\nHornet 4 Drive       0    1    3 21.4 3.08\nHornet Sportabout    0    2    3 18.7 3.15\nValiant              0    1    3 18.1 2.76\nDuster 360           0    4    3 14.3 3.21\nMerc 240D            0    2    4 24.4 3.69\nMerc 230             0    2    4 22.8 3.92\nMerc 280             0    4    4 19.2 3.92\nMerc 280C            0    4    4 17.8 3.92\nMerc 450SE           0    3    3 16.4 3.07\nMerc 450SL           0    3    3 17.3 3.07\nMerc 450SLC          0    3    3 15.2 3.07\nCadillac Fleetwood   0    4    3 10.4 2.93\nLincoln Continental  0    4    3 10.4 3.00\nChrysler Imperial    0    4    3 14.7 3.23\nFiat 128             1    1    4 32.4 4.08\nHonda Civic          1    2    4 30.4 4.93\nToyota Corolla       1    1    4 33.9 4.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-2",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-2",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable()\n\n\n\n\namcarbgearmpgdrat14421.03.9014421.03.9011422.83.8501321.43.0802318.73.1501318.12.7604314.33.2102424.43.6902422.83.9204419.23.9204417.83.9203316.43.0703317.33.0703315.23.0704310.42.9304310.43.0004314.73.2311432.44.0812430.44.9311433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-3",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-3",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla()\n\n\n\n\namcarbgearmpgdrat14421.03.9014421.03.9011422.83.8501321.43.0802318.73.1501318.12.7604314.33.2102424.43.6902422.83.9204419.23.9204417.83.9203316.43.0703317.33.0703315.23.0704310.42.9304310.43.0004314.73.2311432.44.0812430.44.9311433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-4",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-4",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\")\n\n\n\n\namcarbgearmiles per gallondrat14421.03.9014421.03.9011422.83.8501321.43.0802318.73.1501318.12.7604314.33.2102424.43.6902422.83.9204419.23.9204417.83.9203316.43.0703317.33.0703315.23.0704310.42.9304310.43.0004314.73.2311432.44.0812430.44.9311433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-5",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-5",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit()\n\n\n\n\namcarbgearmiles per gallondrat14421.03.9014421.03.9011422.83.8501321.43.0802318.73.1501318.12.7604314.33.2102424.43.6902422.83.9204419.23.9204417.83.9203316.43.0703317.33.0703315.23.0704310.42.9304310.43.0004314.73.2311432.44.0812430.44.9311433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-6",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-6",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\"))\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-7",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-7",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1)\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-8",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-8",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\")\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-9",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-9",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5)\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-10",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-10",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2)\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-11",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-11",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2) %&gt;%\n  color(color = \"white\", part = \"header\")\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-12",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-12",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2) %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  bold(~ drat &gt; 3.2, ~ gear, bold = TRUE)\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-13",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-13",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2) %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  bold(~ drat &gt; 3.2, ~ gear, bold = TRUE) %&gt;%\n  align(j = 1)\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-14",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-14",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2) %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  bold(~ drat &gt; 3.2, ~ gear, bold = TRUE) %&gt;%\n  align(j = 1) %&gt;%\n  fontsize(i = 12:18, size = 8)\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-15",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-15",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2) %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  bold(~ drat &gt; 3.2, ~ gear, bold = TRUE) %&gt;%\n  align(j = 1) %&gt;%\n  fontsize(i = 12:18, size = 8) %&gt;%\n  add_footer_row(values = \"blah blah\", colwidths = 5)\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22blah blah"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-16",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-16",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2) %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  bold(~ drat &gt; 3.2, ~ gear, bold = TRUE) %&gt;%\n  align(j = 1) %&gt;%\n  fontsize(i = 12:18, size = 8) %&gt;%\n  add_footer_row(values = \"blah blah\", colwidths = 5) %&gt;%\n  border_outer(fp_border(color=\"red\", width = 2))\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22blah blah"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-17",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-17",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2) %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  bold(~ drat &gt; 3.2, ~ gear, bold = TRUE) %&gt;%\n  align(j = 1) %&gt;%\n  fontsize(i = 12:18, size = 8) %&gt;%\n  add_footer_row(values = \"blah blah\", colwidths = 5) %&gt;%\n  border_outer(fp_border(color=\"red\", width = 2)) %&gt;%\n  line_spacing(space = 1.5)\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22blah blah"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-18",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#taste-of-the-flextable-package-18",
    "title": "08-1: Making Tables with flextable",
    "section": "Taste of the flextable package",
    "text": "Taste of the flextable package\n\n\n\nhead(mtcars, 20) %&gt;%\n  select(am, carb, gear, mpg, drat) %&gt;%\n  flextable() %&gt;%\n  theme_vanilla() %&gt;%\n  set_header_labels(mpg = \"miles per gallon\") %&gt;%\n  autofit() %&gt;%\n  merge_v(j = c(\"am\", \"carb\")) %&gt;%\n  italic(j = 1) %&gt;%\n  bg(bg = \"#C90000\", part = \"header\") %&gt;%\n  color(color = \"blue\", j = 5) %&gt;%\n  color(color = \"red\", i = 5:10, j = 2) %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  bold(~ drat &gt; 3.2, ~ gear, bold = TRUE) %&gt;%\n  align(j = 1) %&gt;%\n  fontsize(i = 12:18, size = 8) %&gt;%\n  add_footer_row(values = \"blah blah\", colwidths = 5) %&gt;%\n  border_outer(fp_border(color=\"red\", width = 2)) %&gt;%\n  line_spacing(space = 1.5) %&gt;%\n  theme_tron()\n\n\n\n\namcarbgearmiles per gallondrat14421.03.90421.03.901422.83.850321.43.082318.73.151318.12.764314.33.212424.43.69422.83.924419.23.92417.83.923316.43.07317.33.07315.23.074310.42.93310.43.00314.73.2311432.44.082430.44.931433.94.22blah blah"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#create-table-and-modify-parts",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#create-table-and-modify-parts",
    "title": "08-1: Making Tables with flextable",
    "section": "Create table and modify Parts",
    "text": "Create table and modify Parts\n\nInstructionData PreparationInitiate a table\n\n\nInstall the following packages and library them.\n\n#--- install if you have not ---#\ninstall.packages(\"flextable\")\ninstall.packages(\"officer\")\n\n#--- library ---#\nlibrary(flextable)\nlibrary(officer)\n\n\n\n\n#--- Define regions ---#\nAustralasia &lt;- c(\"AU\", \"NZ\")\nMelanesia &lt;- c(\"NC\", \"PG\", \"SB\", \"VU\")\nPolynesia &lt;- c(\"PF\", \"WS\", \"TO\", \"TV\")\n\n#--- create a dataset ---#\n(\ntab_data &lt;- \n  countrypops %&gt;%\n  filter(country_code_2 %in% c(\n    Australasia, Melanesia, Polynesia\n  )) %&gt;%\n  filter(year %in% c(1995, 2005, 2015)) %&gt;%\n  mutate(region = case_when(\n    country_code_2 %in% Australasia ~ \"Australasia\",\n    country_code_2 %in% Melanesia ~ \"Melanesia\",\n    country_code_2 %in% Polynesia ~ \"Polynesia\",\n  )) %&gt;%\n  pivot_wider(\n    values_from = population,\n    names_from = year,\n    names_prefix = \"y_\"\n  ) %&gt;%\n  arrange(region, desc(y_2015)) %&gt;%\n  select(-starts_with(\"country_code\")) %&gt;%\n  mutate(\n    pop_ratio_10_15 = y_2015 / y_2005,\n    date = \"2013-11-14\"\n  )\n)\n\n# A tibble: 10 × 7\n   country_name     region        y_1995   y_2005   y_2015 pop_ratio_10_15 date \n   &lt;chr&gt;            &lt;chr&gt;          &lt;int&gt;    &lt;int&gt;    &lt;int&gt;           &lt;dbl&gt; &lt;chr&gt;\n 1 Australia        Australasia 18004882 20176844 23815995            1.18 2013…\n 2 New Zealand      Australasia  3673400  4133900  4609400            1.12 2013…\n 3 Papua New Guinea Melanesia    4616439  6498818  8682174            1.34 2013…\n 4 Solomon Islands  Melanesia     375189   482486   612660            1.27 2013…\n 5 Vanuatu          Melanesia     170612   217632   276438            1.27 2013…\n 6 New Caledonia    Melanesia     193816   232250   269460            1.16 2013…\n 7 French Polynesia Polynesia     231446   271060   291787            1.08 2013…\n 8 Samoa            Polynesia     174902   188626   203571            1.08 2013…\n 9 Tonga            Polynesia      99977   105633   106122            1.00 2013…\n10 Tuvalu           Polynesia       9585     9912    10877            1.10 2013…\n\n\n\n\n\nHowExample\n\n\nWe can apply flextable() to a data.frame to initiate a table:\n\nflextable(\n  tab_data, \n  col_keys = \n    c(\n      \"country_name\",\n      \"lufhierh\",\n      \"region\",\n      \"y_1995\",\n      \"y_2005\"\n    )\n )\n\nwhere col_keys are the list of the name of the variables from the data.frame (providing variable names that do no exist in the dataset creates blank columns)\n\n\n\n\n\nflextable(\n  tab_data,\n  col_keys = \n    c(\n      \"country_name\", \n      \"lufhierh\", \n      \"region\", \n      \"y_1995\", \n      \"y_2005\"\n    )\n)\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#selector",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#selector",
    "title": "08-1: Making Tables with flextable",
    "section": "Selector",
    "text": "Selector\n\nInstructionPreparationi, j: formulai, j: integer, characteri, j: logical, integerby parts\n\n\nMany functions let you choose specifically where you apply changes. Those functions have\n\ni for selecting rows\n\nformula\ninteger vector\nlogical vector\n\nj for selecting columns\n\nformula\ncharacter vector\ninteger vector\n\n\nYou can use any combinations of the reference methods for i and j.\n\n\nWe will be building on ft created below:\n\n\n\nft &lt;-\n  tab_data %&gt;% \n  flextable(\n    col_keys = \n      c(\n        \"country_name\",\n        \"region\",\n        \"y_1995\",\n        \"y_2005\"\n      )\n  ) \n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\nSyntax\n\nfunction(\n  i = ~ condition based on variables,\n  j = ~ vairable 1 + variable 2 + ...,\n  .\n)\n\n\nExample\n\n\n\nft %&gt;%\n  color(\n    i = ~ y_2005 &gt; 2e5,\n    j = ~ country_name + region,\n    color = \"red\"\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\nUsing a character vector for j is not recommended because using a formula involves less typing.\n\n\n\nft %&gt;%\n  color(\n    i = c(2, 4:9),\n    j = c(\"country_name\", \"y_1995\"),\n    color = \"red\"\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\n\n\nft %&gt;% \n  color(\n    i = rep(c(TRUE, FALSE), each = 5),\n    j = c(1, 3),\n    color = \"red\"\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\nYou can refer to parts of the table using part = option. The available options are\n\nheader: the header part of the table\nfooter: the footer part of the table\nbody: the body part of the table\nall: the body and the header parts of the table\n\n\n\n\n\ntab_data %&gt;% \n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;% \n  color(\n    part = \"header\",\n    color = \"red\"\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\nDifferent functions have different default values for part."
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#style",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#style",
    "title": "08-1: Making Tables with flextable",
    "section": "Style",
    "text": "Style\n\nIntroductionfp_text()paragraph vs cellfp_par()fp_cell()\n\n\nYou can use the style() function to change the style and format of a table.\nSyntax\n\nstyle(\n  x,\n  i = NULL,\n  j = NULL,\n  pr_t = NULL,\n  pr_p = NULL,\n  pr_c = NULL,\n  part = \"body\"\n)\n\nWe can use fp_*() functions from the officer package to specify the style of texts, paragraphs, and cells.\n\npr_t = fp_text(): format texts\npr_p = fp_par(): format paragraphs\npr_c = fp_celll(): format cells\n\n(pr in pr_* = stands for property.)\n\n\n\nIntroductionExample\n\n\nfp_text() lets you update the appearance of texts, including color, font size, bold or not, etc (see the help page below for the complete list of options).\n\nSyntax\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nft %&gt;% \n  style(\n    i = 4:6,\n    j = ~ country_name,\n    pr_t = \n      fp_text(\n        color = \"red\",\n        bold = TRUE,\n        underlined = TRUE\n      )\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\n\n\n\n\nparagraphs: rectangular boxes around the texts inside the cells\ncells: rectangular boxes that contain paragraphs and texts inside\n\n\n\n\nft %&gt;% \n  style(\n    pr_p = fp_par(\n      border.bottom = fp_border(width = 2, color = \"blue\")\n    ),\n    pr_c = fp_cell(\n      border.bottom = fp_border(width = 2, color = \"red\")\n    )\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\nIntroductionExample\n\n\nfp_paragraph() lets you update the appearance of paragraphs (see the help page below for the complete list of options).\n\nSyntax\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nft %&gt;% \n  style(\n    i = 4:6,\n    j = ~ country_name,\n    pr_p = fp_par(\n      text.align = \"left\",\n      shading.color = \"grey\"\n    )\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\n\n\n\n\nIntroductionExample\n\n\nfp_cell() lets you update the appearance of cells (see the help page below for the complete list of options).\n\nSyntax\n\n?fp_cell\n\n\n\n\n\n\nft %&gt;% \n  style(\n    i = 4:6,\n    j = ~ country_name,\n    pr_c = fp_cell(\n      margin = 2,\n      vertical.align = \"top\",\n      background.color = \"red\"\n    )\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#formatting-convenience-functions",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#formatting-convenience-functions",
    "title": "08-1: Making Tables with flextable",
    "section": "Formatting: convenience functions",
    "text": "Formatting: convenience functions\n\nInstructionExample\n\n\n\nInstead of using the style() function in combination with fp_*() functions, you can easily work on a specific aesthetic feature using convenience functions like below:\n\nalign(), align_text_col(), align_nottext_col(): Set text alignment\nbg(): Set background color\nfont(): Set font\nfontsize(): Set font size\nitalic(): Set italic font\nbold(): Set bold font\ncolor(): Set font color\npadding(): Set paragraph paddings\nvalign(): Set vertical alignment\nrotate(): rotate cell text\nempty_blanks(): make blank columns as transparent\n\nYou can use the selector syntax to specify where the specified effects take place\n\n\n\n\n\n\nft %&gt;%\n  color(\n    i = 1,\n    j = 2,\n    \"#fcba03\"\n  ) %&gt;%\n  bg(\n    i = ~ y_2005 &lt; 2e5,\n    j = c(\"region\"),\n    bg = \"grey\"\n  ) %&gt;%\n  fontsize(\n    i = 7,\n    size = 16\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data\n\n\n\n\n# A tibble: 10 × 7\n   country_name     region        y_1995   y_2005   y_2015 pop_ratio_10_15 date \n   &lt;chr&gt;            &lt;chr&gt;          &lt;int&gt;    &lt;int&gt;    &lt;int&gt;           &lt;dbl&gt; &lt;chr&gt;\n 1 Australia        Australasia 18004882 20176844 23815995            1.18 2013…\n 2 New Zealand      Australasia  3673400  4133900  4609400            1.12 2013…\n 3 Papua New Guinea Melanesia    4616439  6498818  8682174            1.34 2013…\n 4 Solomon Islands  Melanesia     375189   482486   612660            1.27 2013…\n 5 Vanuatu          Melanesia     170612   217632   276438            1.27 2013…\n 6 New Caledonia    Melanesia     193816   232250   269460            1.16 2013…\n 7 French Polynesia Polynesia     231446   271060   291787            1.08 2013…\n 8 Samoa            Polynesia     174902   188626   203571            1.08 2013…\n 9 Tonga            Polynesia      99977   105633   106122            1.00 2013…\n10 Tuvalu           Polynesia       9585     9912    10877            1.10 2013…"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-1",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-1",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-2",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-2",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- text color ---#\n  color(i = 1, j = 2, \"#fcba03\")\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-3",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-3",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- text color ---#\n  color(i = 1, j = 2, \"#fcba03\") %&gt;%\n#--- background ---#\n  bg(i = ~ y_2005 &lt; 2e5, j = c(\"region\"), bg = \"grey\")\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-4",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-4",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- text color ---#\n  color(i = 1, j = 2, \"#fcba03\") %&gt;%\n#--- background ---#\n  bg(i = ~ y_2005 &lt; 2e5, j = c(\"region\"), bg = \"grey\") %&gt;%\n#--- font type ---#\n  font(i = 5, j = ~ country_name + y_2005, fontname = \"Times\")\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-5",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-5",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- text color ---#\n  color(i = 1, j = 2, \"#fcba03\") %&gt;%\n#--- background ---#\n  bg(i = ~ y_2005 &lt; 2e5, j = c(\"region\"), bg = \"grey\") %&gt;%\n#--- font type ---#\n  font(i = 5, j = ~ country_name + y_2005, fontname = \"Times\") %&gt;%\n#--- font size ---#\n  fontsize(i = 7, size = 16)\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-6",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-6",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- text color ---#\n  color(i = 1, j = 2, \"#fcba03\") %&gt;%\n#--- background ---#\n  bg(i = ~ y_2005 &lt; 2e5, j = c(\"region\"), bg = \"grey\") %&gt;%\n#--- font type ---#\n  font(i = 5, j = ~ country_name + y_2005, fontname = \"Times\") %&gt;%\n#--- font size ---#\n  fontsize(i = 7, size = 16) %&gt;%\n#--- italicize ---#\n  italic(j = 2)\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-7",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-7",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- text color ---#\n  color(i = 1, j = 2, \"#fcba03\") %&gt;%\n#--- background ---#\n  bg(i = ~ y_2005 &lt; 2e5, j = c(\"region\"), bg = \"grey\") %&gt;%\n#--- font type ---#\n  font(i = 5, j = ~ country_name + y_2005, fontname = \"Times\") %&gt;%\n#--- font size ---#\n  fontsize(i = 7, size = 16) %&gt;%\n#--- italicize ---#\n  italic(j = 2) %&gt;%\n#--- bold ---#\n  bold(j = 4)\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-8",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-8",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- text color ---#\n  color(i = 1, j = 2, \"#fcba03\") %&gt;%\n#--- background ---#\n  bg(i = ~ y_2005 &lt; 2e5, j = c(\"region\"), bg = \"grey\") %&gt;%\n#--- font type ---#\n  font(i = 5, j = ~ country_name + y_2005, fontname = \"Times\") %&gt;%\n#--- font size ---#\n  fontsize(i = 7, size = 16) %&gt;%\n#--- italicize ---#\n  italic(j = 2) %&gt;%\n#--- bold ---#\n  bold(j = 4) %&gt;%\n#--- vertical text alignment ---#\n  valign(i = ~ region == \"Australasia\", j = 4, valign = \"top\")\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-9",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-formatting-9",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Formatting",
    "text": "Demonstration: Formatting\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- text color ---#\n  color(i = 1, j = 2, \"#fcba03\") %&gt;%\n#--- background ---#\n  bg(i = ~ y_2005 &lt; 2e5, j = c(\"region\"), bg = \"grey\") %&gt;%\n#--- font type ---#\n  font(i = 5, j = ~ country_name + y_2005, fontname = \"Times\") %&gt;%\n#--- font size ---#\n  fontsize(i = 7, size = 16) %&gt;%\n#--- italicize ---#\n  italic(j = 2) %&gt;%\n#--- bold ---#\n  bold(j = 4) %&gt;%\n#--- vertical text alignment ---#\n  valign(i = ~ region == \"Australasia\", j = 4, valign = \"top\") %&gt;%\n#--- text direction ---#\n  rotate(i = 1, j = 2, rotation = \"tbrl\")\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#borders-convenience-functions",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#borders-convenience-functions",
    "title": "08-1: Making Tables with flextable",
    "section": "Borders: convenience functions",
    "text": "Borders: convenience functions\n\nList of functionsInstructionfp_border()\n\n\nHere is a list of convenience functions that you can use to draw border lines on a table:\n\nhline(): set horizontal borders\nhline_bottom(): set bottom horizontal border\nhline_top(): set top horizontal border\nvline(): set vertical borders\nvline_left(): set flextable left vertical borders\nvline_right(): set flextable right vertical borders\nborder(): Set cell borders\nborder_inner(): set vertical & horizontal inner borders\nborder_inner_h(): set inner borders\nborder_inner_v(): set vertical inner borders\nborder_outer(): set outer borders\nborder_remove(): remove borders\nfix_border_issues(): fix border issues when cell are merged\n\n\n\n\nUse the selector syntax to specify where\nUse the border = option along with fp_border() from the officer package to specify what kind of borders you would like to draw\n\nExample\n\nhline(\n    i = 3, \n    j = 1:3, \n    border = fp_border( \n      color = \"red\", \n      style = \"dotted\", \n      width = 4 \n    ) \n  ) \n\n\n\n\nIntroductionExample\n\n\nfp_border() lets you specify the aesthetics of the borders you are drawing.\n\nSyntax\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nft %&gt;%\n  hline(\n    i = 3, \n    j = 1:3, \n    border = fp_border(\n      color = \"red\",\n      style = \"dotted\",\n      width = 4\n    )\n  ) \n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data\n\n\n\n\n# A tibble: 10 × 7\n   country_name     region        y_1995   y_2005   y_2015 pop_ratio_10_15 date \n   &lt;chr&gt;            &lt;chr&gt;          &lt;int&gt;    &lt;int&gt;    &lt;int&gt;           &lt;dbl&gt; &lt;chr&gt;\n 1 Australia        Australasia 18004882 20176844 23815995            1.18 2013…\n 2 New Zealand      Australasia  3673400  4133900  4609400            1.12 2013…\n 3 Papua New Guinea Melanesia    4616439  6498818  8682174            1.34 2013…\n 4 Solomon Islands  Melanesia     375189   482486   612660            1.27 2013…\n 5 Vanuatu          Melanesia     170612   217632   276438            1.27 2013…\n 6 New Caledonia    Melanesia     193816   232250   269460            1.16 2013…\n 7 French Polynesia Polynesia     231446   271060   291787            1.08 2013…\n 8 Samoa            Polynesia     174902   188626   203571            1.08 2013…\n 9 Tonga            Polynesia      99977   105633   106122            1.00 2013…\n10 Tuvalu           Polynesia       9585     9912    10877            1.10 2013…"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-1",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-1",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-2",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-2",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove()\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-3",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-3",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\"))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-4",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-4",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\"))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-5",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-5",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\"))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-6",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-6",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical lines ---#\n  vline(border = fp_border(color = \"orange\"))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-7",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-7",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical lines ---#\n  vline(border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical on the left edge  ---#\n  vline_left(border = fp_border(color = \"grey\", width = 2))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-8",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-8",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical lines ---#\n  vline(border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical on the left edge  ---#\n  vline_left(border = fp_border(color = \"grey\", width = 2)) %&gt;%\n#--- vertical on the right edge  ---#\n  vline_right(border = fp_border(color = \"red\", width = 2))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-9",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-9",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical lines ---#\n  vline(border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical on the left edge  ---#\n  vline_left(border = fp_border(color = \"grey\", width = 2)) %&gt;%\n#--- vertical on the right edge  ---#\n  vline_right(border = fp_border(color = \"red\", width = 2)) %&gt;%\n#--- borders of individual cells ---#\n  border(i = 4, j = 2,\n    border.top = fp_border(color = \"red\", width = 3),\n    border.left = fp_border(color = \"green\", width = 3),\n    border.right = fp_border(color = \"black\", width = 3),\n    border.bottom = fp_border(color = \"pink\", width = 3)\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-10",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-10",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical lines ---#\n  vline(border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical on the left edge  ---#\n  vline_left(border = fp_border(color = \"grey\", width = 2)) %&gt;%\n#--- vertical on the right edge  ---#\n  vline_right(border = fp_border(color = \"red\", width = 2)) %&gt;%\n#--- borders of individual cells ---#\n  border(i = 4, j = 2,\n    border.top = fp_border(color = \"red\", width = 3),\n    border.left = fp_border(color = \"green\", width = 3),\n    border.right = fp_border(color = \"black\", width = 3),\n    border.bottom = fp_border(color = \"pink\", width = 3)\n  ) %&gt;%\n  #--- horizontal lines (inner) ---#  #--- horizontal lines (inner) ---#\n  border_inner_h(border = fp_border(color = \"black\"))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-11",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-11",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical lines ---#\n  vline(border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical on the left edge  ---#\n  vline_left(border = fp_border(color = \"grey\", width = 2)) %&gt;%\n#--- vertical on the right edge  ---#\n  vline_right(border = fp_border(color = \"red\", width = 2)) %&gt;%\n#--- borders of individual cells ---#\n  border(i = 4, j = 2,\n    border.top = fp_border(color = \"red\", width = 3),\n    border.left = fp_border(color = \"green\", width = 3),\n    border.right = fp_border(color = \"black\", width = 3),\n    border.bottom = fp_border(color = \"pink\", width = 3)\n  ) %&gt;%\n  #--- horizontal lines (inner) ---#  #--- horizontal lines (inner) ---#\n  border_inner_h(border = fp_border(color = \"black\")) %&gt;%\n  #--- vertical lines (inner) ---#  #--- vertical lines (inner) ---#\n  border_inner_v(border = fp_border(color = \"black\"))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-12",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-12",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical lines ---#\n  vline(border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical on the left edge  ---#\n  vline_left(border = fp_border(color = \"grey\", width = 2)) %&gt;%\n#--- vertical on the right edge  ---#\n  vline_right(border = fp_border(color = \"red\", width = 2)) %&gt;%\n#--- borders of individual cells ---#\n  border(i = 4, j = 2,\n    border.top = fp_border(color = \"red\", width = 3),\n    border.left = fp_border(color = \"green\", width = 3),\n    border.right = fp_border(color = \"black\", width = 3),\n    border.bottom = fp_border(color = \"pink\", width = 3)\n  ) %&gt;%\n  #--- horizontal lines (inner) ---#  #--- horizontal lines (inner) ---#\n  border_inner_h(border = fp_border(color = \"black\")) %&gt;%\n  #--- vertical lines (inner) ---#  #--- vertical lines (inner) ---#\n  border_inner_v(border = fp_border(color = \"black\")) %&gt;%\n  border_remove()\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-13",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#demonstration-borders-13",
    "title": "08-1: Making Tables with flextable",
    "section": "Demonstration: Borders",
    "text": "Demonstration: Borders\n\n\n\ntab_data %&gt;%\n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;%\n#--- remove all borders ---#\n  border_remove() %&gt;%\n#--- horizontal lines ---#\n  hline(i = 3, j = 1:3, border = fp_border(color = \"red\")) %&gt;%\n#--- horizontal line at the bottom ---#\n  hline_bottom(j = 3:4, border = fp_border(color = \"green\")) %&gt;%\n#--- horizontal line at the top ---#\n  hline_top(j = 1:3, border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical lines ---#\n  vline(border = fp_border(color = \"orange\")) %&gt;%\n#--- vertical on the left edge  ---#\n  vline_left(border = fp_border(color = \"grey\", width = 2)) %&gt;%\n#--- vertical on the right edge  ---#\n  vline_right(border = fp_border(color = \"red\", width = 2)) %&gt;%\n#--- borders of individual cells ---#\n  border(i = 4, j = 2,\n    border.top = fp_border(color = \"red\", width = 3),\n    border.left = fp_border(color = \"green\", width = 3),\n    border.right = fp_border(color = \"black\", width = 3),\n    border.bottom = fp_border(color = \"pink\", width = 3)\n  ) %&gt;%\n  #--- horizontal lines (inner) ---#  #--- horizontal lines (inner) ---#\n  border_inner_h(border = fp_border(color = \"black\")) %&gt;%\n  #--- vertical lines (inner) ---#  #--- vertical lines (inner) ---#\n  border_inner_v(border = fp_border(color = \"black\")) %&gt;%\n  border_remove() %&gt;%\n#--- the outer lines ---#\n  border_outer(border = fp_border(color = \"red\", width = 4))\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#headers-and-footers",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#headers-and-footers",
    "title": "08-1: Making Tables with flextable",
    "section": "Headers and footers",
    "text": "Headers and footers\n\nadd_*_row()footnote()set_header_labels()delete_part()\n\n\n\nInstructionExample\n\n\nYou can use these functions to add a row to the top or the bottom of a table:\n\nadd_header_row()\nadd_footer_row()\n\n\nSyntax\n\nadd_*_row(flextable, \n  values = vector of characters, \n  colwidths = vector of integers \n)\n\n\nExample\n\nadd_header_row(\n  values = c(\"3-column label\", \"1-column label\"),\n  colwidths = c(3, 1)\n)\n\nThis code would insert a row where “3-column label” spans for three columns and “1-column label” spans for one column.\n\n\n\n\nNote\n\n\nYou might want to use footnote() to create footnotes instead of add_footer_rows, as it allows you to generate reference symbols at the same time.\n\n\n\n\n\n\nft %&gt;% \n  add_header_row(\n    values = c(\"3-column label\", \"1-column label\"),\n    colwidths = c(3, 1)\n  ) %&gt;% \n  align(align = \"center\", part = \"header\") %&gt;% \n  autofit() %&gt;% \n  add_footer_row(\n    values = \"4-column footnote, which is made longer to show it spans across the entire columns.\",\n    colwidths = 4\n  )\n\n3-column label1-column labelcountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,9124-column footnote, which is made longer to show it spans across the entire columns.\n\n\n\n\n\n\n\n\n\nIntroductionExample\n\n\nExplanation\nfootnote() lets you add footnotes with reference symbols for each of them.\n\nSyntax\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nft %&gt;%\n  footnote(\n    i = 1, j = 1:2, part = \"header\",\n    value = as_paragraph(\n      c(\n        \"This is footnote 1\",\n        \"This is footnote 2\"\n      )\n    ),\n    ref_symbols = c(\"++\", \"**\")\n  )\n\n\n\n\ncountry_name++region**y_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912++This is footnote 1**This is footnote 2\n\n\n\n\n\n\nnth element in value is associated with nth value in ref_symbols\nuse as_paragraph(c()) for value\n\n\n\n\n\n\n\nset_header_labels() lets you re-label existing header labels using a named list.\n\nSyntax\n\nset_header_labels(\n  values = list( \n    existing name 1 = \"new name 1\", \n    existing name 2 = \"new name 2\" \n  )\n)\n\n\nExample\n\n\n\nft %&gt;%\n  set_header_labels(\n    values = list(\n      country_name = \"Country Name\",\n      region = \"Region\"\n    )\n  ) %&gt;% \n  autofit() \n\n\n\n\nCountry NameRegiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\nHowNote\n\n\nSyntax\n\ndelete_part(flextable, part = \"header\")\n\n\nThe default is to delete the header.\nExample\n\n\n\nft %&gt;% \n  delete_part()\n\n\n\n\nAustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\nYou can still (or have to) use the original variable names from the dataset for selectors even after you deleter the header:\n\ntab_data %&gt;%  \n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;% \n  delete_part() %&gt;% \n  hline(\n    i = 3, \n    j = ~ country_name + region, \n    border = fp_border(color = \"red\", style = \"dotted\", width = 4 \n    ) \n  )  \n\nAustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#layout",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#layout",
    "title": "08-1: Making Tables with flextable",
    "section": "Layout",
    "text": "Layout\n\nInstructionmerge_v()autofit()width()\n\n\nList of functions\nHere is a list of functions you can use to change the layout of a table:\n\nmerge_at(): Merge flextable cells into a single one\nmerge_h(): Merge flextable cells horizontally\nmerge_h_range(): rowwise merge of a range of columns\nmerge_v(): Merge flextable cells vertically\nheight(), height_all(): Set flextable rows height\nwidth(): Set flextable columns width\nhrule(): Set flextable rule for rows heights\nautofit(): Adjusts cell widths and heights\nfit_to_width(): fit a flextable to a maximum width\nas_grouped_data(): grouped data transformation\n\nUse the selector syntax to specify where just like the other functions we have seen. We will look at merge_v(), autofit(), and width().\n\n\n\n\nNote\n\n\nI have not encountered cases where I need to merge cells horizontally. It works in a similar manner to the way merge_v() works except that it works on rows instead of columns.\n\n\n\n\n\nmerge_v() merges vertically the adjacent cells with the same values. It does not accept i (rows) argument.\n\n\nBefore\n\nft \n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\nAfter\n\nft %&gt;%  merge_v(j = ~ region)\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New Zealand3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon Islands375,189482,486Vanuatu170,612217,632New Caledonia193,816232,250French PolynesiaPolynesia231,446271,060Samoa174,902188,626Tonga99,977105,633Tuvalu9,5859,912\n\n\n\n\n\n\n\nautofit() adjust the height and width of cells .\n\n\nBefore\n\ntab_data %&gt;%\n  mutate(country_name = ifelse(country_name == \"Australia\", \"super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh\", country_name)) %&gt;% \n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;% \n  merge_v(j = ~ region)\n\ncountry_nameregiony_1995y_2005super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluhAustralasia18,004,88220,176,844New Zealand3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon Islands375,189482,486Vanuatu170,612217,632New Caledonia193,816232,250French PolynesiaPolynesia231,446271,060Samoa174,902188,626Tonga99,977105,633Tuvalu9,5859,912\n\n\n\nAfter\n\ntab_data %&gt;%\n  mutate(country_name = ifelse(country_name == \"Australia\", \"super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh\", country_name)) %&gt;% \n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;% \n  merge_v(j = ~ region) %&gt;% autofit()\n\ncountry_nameregiony_1995y_2005super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluhAustralasia18,004,88220,176,844New Zealand3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon Islands375,189482,486Vanuatu170,612217,632New Caledonia193,816232,250French PolynesiaPolynesia231,446271,060Samoa174,902188,626Tonga99,977105,633Tuvalu9,5859,912\n\n\nIt adjusted the width of the 1st column so that more texts are displayed in a single row. But, the width of the entire table does not go over the limit of the paper.\n\n\n\n\n\nwidth() set the width of columns to the length you specify.\n\n\nBefore\n\nft %&gt;%\n  autofit()\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\nAfter\n\nft %&gt;% \n  autofit() %&gt;% \n  width(j = ~ country_name, width = 1)\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#output",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#output",
    "title": "08-1: Making Tables with flextable",
    "section": "Output",
    "text": "Output\n\nIntroduction\n\n\nWe can save the table in various formats.\n\nsave_as_docx(): docx (WORD)\nsave_as_pptx(): pptx (Power Point)\nsave_as_image(): image (png, pdf, jpeg) with help from the webshot2 package\n\nLet’s create a table for demonstration:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPower Point\n\nsave_as_pptx(table_tmep, path = \"temp_table.pptx\")\n\nImage\nI do not really recommend this option. It is hard to configure the output.\nFirst install the webshot2 package.\n\n#--- install ---#\nremotes::install_github(\"rstudio/webshot2\") \n\n#--- library ---#\nlibrary(webshot2)\n\n\npng\n\nsave_as_image(table_tmep, path = \"temp_table.png\") \n\n\npdf\n\nsave_as_image(table_tmep, path = \"temp_table.pdf\", zoom = 10, webshot = \"webshot2\") \n\n::: \n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#tidyverse-package",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#tidyverse-package",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "tidyverse package",
    "text": "tidyverse package\n\nWhat is it?PreparationConflicts?\n\n\n\nThe tidyverse is a package of a collection of packages. Some of the packages included are\n\nreadr: read datasets in various formats\ndplyr: manipulate and merge datasets\ntidyr: reshape datasets\nggplot2: data visualization\nstringr: character string operations\n\nThese packages are by no means the only ways to do the operations we will learn today. However, we learn these packages because they are easy to use.\nThey are also easy to learn and get help as they are extremely popular and very well-documented. Go to the tidyverse website, and click on the icon of the package you would like to learn, then you will have a nice documentation of the packages.\nYou could also google the package name, and you will see bunch of introductions/tutorials.\n\n\n\nInstall the package if you have not.\n\ninstall.packages(\"tidyverse\")\n\n\nWhen you load the tidyverse package, it automatically loads many of the packages contained in it.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nSometimes packages share the same functions names.\nWhen those packages are loaded, there are function name conflicts where the function from the package loaded later masks the function from the other package."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#data.frame-and-tibble-1",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#data.frame-and-tibble-1",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "data.frame and tibble",
    "text": "data.frame and tibble\n\nWhat are they?ObjectivesPreparation\n\n\ndata.frame\n\nThe traditional (most common) class of two-dimensional data (rows and columns) supported by R.\n\n\ntibble\n\nA relatively newer class of two-dimensional data that brings minor enhancements over data.frame.\ntibble is defined by the tibble package, which is part of the tidyverse package.\n\n\n\n\nLearn basic operations on data.frame and tibble\nHighlight some differences between the two (They are almost interchangeable, and you do no need to pay much attention to which class of data you are dealing with)\n\n\n\nWe use mtcars dataset. It is readily available to you.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can convert a data.frame into a tibble using as_tibble():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nmtcars is a tibble (and also a data.frame).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#display-method",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#display-method",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "display method",
    "text": "display method\n\ndata.frametibble\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#accessing-parts-of-the-data",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#accessing-parts-of-the-data",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Accessing parts of the data",
    "text": "Accessing parts of the data\n\nNumerical indexVariable namesUsing $\n\n\nSubsetting a data.frame works in a very similar manner as a matrix:\n\nmatrix[rows of interest, columns of interest]\n\nExample:\n2nd to 8th rows, the 3rd and 5th columns\n\n\ndata.frame\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ntibble\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nBut, subsetting a data.frame using numerical indexes are not recommended because it is not immediately clear to you (or your collaborators who might look at the code) what you intended to do with the code.\nInstead, the following is better:\n\ndata[, c(\"variable 1\", \"variable 2\", ...)]\n\nExamples:\n\n\ndata.frame\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ntibble\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nAlternatively, to access a column (variable) from a dataset, you can use $ like below (remember? A data.frame is a special kind of list).\nExamples:\n\n\ndata.frame\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ntibble\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#data-preparation",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#data-preparation",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nflightsflights_mini\n\n\nWe use flights, which is from the nycflights13 package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe also use flights_mini, which is created by running the code below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou do not have to understand the code just yet. You will, once you have completed the lecture. Just inspect the data and familiarize yourself with it."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-piping",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-piping",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Piping with %>%",
    "text": "Piping with %&gt;%\n\nIntroductionMore generallyRefer to the preceding objectChainingWhy?\n\n\nLet f() be a function and x is an R object that f() accepts. Then,\nx %&gt;% f() is the same as f(x)\nTry the following codes and confirm they return the same results:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nThe piping operator %&gt;% is actually from the magrittr package. But, when you load the dplyr package, it is automatically loaded as well.\n\n\n\n\n\nSuppose you have more than one arguments to the function like this:\n\nf(x1, x2, option 1, option 2)\n\n\nThen,\n\nz %&gt;% f(x2, option 1, option 2)\n\n\nis equivalent to\n\nf(z, x2, option 1, option 2) \n\n\n\n\n\n\n\nImportant\n\n\nThat is, in general, an R object that precedes the piping operator (%&gt;%) becomes the  first  argument of the function that comes after the piping operator.\n\n\n\n\n\n\n\n\n\n\nWhat if the object before the piping operator is not the first argument of the subsequent function?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis does not work:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nbecause the above is equivalent to\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can refer to the preceding object by . like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can keep piping like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nImportant\n\n\nThe object created by all the codes preceding the piping operator is passed down to the function after the piping operator.\n\n\n\nFor example, relocate(dep_time) receives as its first argument the outcome of the evaluation of the highlighted parts of the code below.\n\n\n\nSetupAlternative 1Alternative 2 (with piping)\n\n\nConsider the following sequence of actions:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNotice that you generated two intermediate datasets (a1 and a2) to obtain the dataset you wanted (a3).\nThese intermediate objects are generated only for the purpose of generating the final dataset.\nIt is easy to imagine that you will soon have lots of unnecessary intermediate objects on R.\n\n\n\nAlternatively, you can do the following:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis does not create any intermediate objects unlike the first example.\nHowever, it can be difficult to understand the code because the order of execution is the reverse of the order in which the functions are written when you read the code from left to right.\n\n\n\nTaking advantage of the piping operator,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is much easier to read as the order of execution is the same as the order in which the functions are written."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-dplyr-wrangle",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-dplyr-wrangle",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Data wrangling with the dplyr package",
    "text": "Data wrangling with the dplyr package\n\nWhat is it?filterselectrelocatemutaterenamearrangeImportant\n\n\nThe dplyr packages provides useful functions to transform data.\n\nfilter(): select rows that satisfy user-specified conditions\nselect(): keep (remove) only the variables the user specified\nmutate(): create (over-write) a variable based on user-specified formula\nrename(): rename variables\narrange(): sort by variables specified by the user\n\n\n\n\nNote\n\n\nThere are other useful functions. But, we limit our attention to only the above as they are sufficient to keep up with the main lectures.\n\n\n\n\n\n\nIntroductionExamplesmultiple conditionsExercises\n\n\ndplyr::filter() subsets data row-wise using logical conditions based on variables.\n\nSyntax\n\n#--- syntax ---# \ndplyr::filter(dataset, condition 1, ..., condition K)\n\n\n\nObservations where month is 4:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nObservations where month is NOT 4:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nObservations where month is less than 4:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nand (&)or (|)in any of (%in%)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is very useful when you have many values to check.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nExercise 1Exercise 2Exercise 3\n\n\nFind the observations in June and July.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::filter(flights_mini, month %in% c(6, 7))\n\n\n\n\nFind the observations in January, April, July, September, and December.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::filter(flights_mini, month %in% c(1, 4, 6, 9, 12))\n\n\n\n\nFind the observations by carrier “US”\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::filter(flights_mini, carrier == \"US\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroductionExamplesExercises\n\n\nYou can select a subset of variables using dplyr::select().\n\nSyntax\n\ndplyr::select(dataset, variable 1, variable 2, ...)\n\n\n\n\nIf you want to drop some variables, but want to keep all the other variables, you can take advantage of − operator:\n\nSyntax\n\ndplyr::select(dataset, - variable 1, - variable 2, ...)\n\n\n\nSelect arr_delay:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSelect month, arr_delay, and dep_delay:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDeselect (remove) year and month:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nExercise 1Exercise 2\n\n\nSelect all the columns except arr_delay\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::select(flights_mini, - arr_delay)\n\n\n\n\nSelect arr_delay and month\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::select(flights_mini, month, arr_delay)\n\n\n\n\n\n\n\n\n\n\n\n\nYou can use relocate() to change the column order.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nChosen variables come front with the order of the rest of the variable unchanged.\n\n\n\nIntroductionExampleMultiple variablesFunctionSelective mutationExercises\n\n\nYou can use mutate() to create a new variable (or overwrite the existing one) in the dataset:\n\nSyntax\n\ndplyr::mutate(data, new variable name = expression)\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can define multiple variables within a single mutate() function.\nYou can create a new variable based on the variables that have been just created within the same mutate() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can apply functions to variables when creating new variables:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nThe function you apply has to accept a vector (a variable column).\n\n\n\n\n\nSometimes, you want to to alter the values of a variable for specific rows that satisfy certain conditions.\n\nExampledichotomousmore than two cases\n\n\nSuppose you found out that dep_time for all the flights from JFK was misreported so that dep_time is 10 minutes earlier than the true departure times.\nSo, we would like to add 10 minutes to all the flights by JFK.\nYou can use ifelse() like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSuppose you want to label flights with arr_delay &gt; 0 to be time-loss and time-gain otherwise:\nYou can use ifelse() for defining a dichotomous variable like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe case_when() function is useful if you have more than two cases.\nSyntax:\n\ncase_when(\n  condition 1 ~ value to assign,\n  condition 2 ~ value to assign,\n  condition 3 ~ value to assign,\n  ...\n)\n\n\nExample:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nExercise 1Exercise 2\n\n\nFind the mean value of arr_delay in April and May (combined) and define it as a new variable named avg_arr_delay\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nflights_mini %&gt;%\n  filter(month %in% c(4, 5)) %&gt;%\n  mutate(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  relocate(avg_arr_delay)\n\n\n\n\n\n\n\n\nFind the sum of dep_delay in January, February, and December (combined) and define it as a new variable named sum_dep_delay, and then move the variable to the first column of the dataset.\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nflights %&gt;%\n  dplyr::filter(month %in% c(1, 2, 12)) %&gt;%\n  dplyr::mutate(sum_dep_delay = sum(dep_delay, na.rm = TRUE)) %&gt;%\n  dplyr::relocate(sum_dep_delay)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can rename variables using dplyr::rename().\n\nSyntax\n\nrename(data, new variable name = old variable name, ...)\n\n\nExample\n\n\nRenamed:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOriginal:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nYou can use arrange() to reorder rows based on the value of variables.\n\nSyntax\n\n#--- Syntax (NOT RUN) ---#\narrange(flights_mini, variable name)\n\n\n\nExample (ascending)Example (descending)\n\n\nThe default is the ascending order.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTo arrange in the descending order, you use desc() function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNotice that the original data flights_mini was not affected by the dplyr::filter() operations in the previous slides.\nThis is consistent across all the verbs in dplyr. Whatever actions you take, the original data is unaltered.\nTo use the transformed data for later use, you need to assign it to a new object (or overwrite if that is okay):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-group-operation",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-group-operation",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Grouped Operations",
    "text": "Grouped Operations\n\nMotivationHowOther summarizing functionsNew variableExercises\n\n\nGroup-wise operations, such as the mean of arrival delay by carrier are very useful to gain an insight into differences across groups.\nThe group_by() function in conjunction with summarize() function does exactly that.\n\nSyntax\n\n#--- group by variables ---#\ngroup_by(dataset, variable to group by, variable to group by, ...)  \n\n#--- summarize ---#\nsummarize(grouped dataset, expression)  \n\n\n\n\nStep 1: groupingStep 2: summarizingPiped\n\n\nYou first use group_by() to set the group for a dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThere are no apparent differences in flights_carrier from flights_slim. The only thing you did by group_by() was to tell R that whatever we will do to the new dataset is going to be done by group, which is reflected in “Groups” of the printed data.\n\n\nOnce the group is set, we are ready to do some group-wise (by carrier) operations. Let’s now find the means of arr_delay by carrier so we know which carriers perform better than others. We can do so using summarize().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing the piping operator,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nYou can apply any functions that work on a vector (a variable)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can assign the results of the grouped operations to new variables using mutate()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nExercise 1InstructionExercise 2Exercise 3\n\n\nUsing flights, find the carrier that had the longest average departure delay (dep_delay) during May through August.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nFor the rest of the exercises, we are going to use the weather data for the three airports in NY. First load the weather data and get familiar with the data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFind the daily mean temperature (temp), humidity (humid), wind speed (wind_speed), and precipitation (precip) by the origin of departure. Do not forget to name each daily weather variable.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\n(\ndaily_weather &lt;- \n  weather %&gt;%\n  dplyr::group_by(origin, month, day) %&gt;%\n  dplyr::summarize(\n    temp = mean(temp),\n    humid = mean(humid),\n    wind_speed = mean(wind_speed),\n    precip = mean(precip)\n  )\n) \n\n\n\n\n\n\n\n\nSubset the daily weather data you obtained in exercise 2 so that it contains weather information only in Nov, Dec, Jan, and Feb for flights that depart from “EWR”.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ndaily_weather %&gt;%\n  dplyr::filter(month %in% c(11, 12, 1, 2)) %&gt;%\n  dplyr::filter(origin == \"EWR\")"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#across",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#across",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "across()",
    "text": "across()\n\nWhatSyntax and ExampleCompare\n\n\n\nacross() lets you apply the same operation (function) to multiple columns at the same time.\nIt is used with summarize() and mutate()\nIt is useful when you want to apply the same function to many variables.\n\n\n\nSyntax\n\nacross(which variables to apply the function, function, options to the function)\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote: na.rm = TRUE is an option for the mean() function.\n\n\nWithout across()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWith across()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#select-and-relocate",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#select-and-relocate",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "select() and relocate()",
    "text": "select() and relocate()\nThe approaches to refer to the variables that fit with a specified pattern can be applied to other dplyr operations as well:\nTry:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "07-1: Miscellaneous Useful Functions and Tips",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#data-preparation",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#data-preparation",
    "title": "07-1: Miscellaneous Useful Functions and Tips",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe use the pizzaplace dataset is available in the gt package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#date-1",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#date-1",
    "title": "07-1: Miscellaneous Useful Functions and Tips",
    "section": "Date",
    "text": "Date\n\nMotivationas.Date()lubridateformat for presentationcomponentsmath\n\n\nR has an object class called Date.\nThis is a date as character.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis is a date as Date.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nRecording dates as an Date object instead of a string has several benefits:\n\ncalendar math is possible with Date objects\nyou can filter() based on the chronological order of dates\nconverting date into an another format is easy\n\n\n\nDates (as string) come in various formats. Several of them are:\n\n2010-12-15\n12/15/2010\nDec 15 10\n15 December 2010\n\nThey all represent the same date.\nWe can use as.Date() to transform dates stored as characters into Dates.\n\n#--- NOT RUN ---#  \nas.Date(date in character, format)\n\n\nIn format you specify how day, month, and year are represented in the date characters you intend to convert using special symbols including:\n\n%d: day as a number (0-31)\n%m: month (00, 01, 02, \\(\\dots\\), 12)\n%b: abbreviated month (Jan, \\(\\dots\\), Dec)\n%B: unabbreviated month (January, \\(\\dots\\), December)\n%y: 2-digit year (96 for 1996, 02 for 2002)\n%Y: 4-digit year (1996, 2012)\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAlternatively, you can use the lubridate package to easily convert dates recorded in characters into Dates.\nUsing lubridate, you do not need to provide the format information unlike as.Date()\nInstead, you simply use y (year), m (month), d (day) in the order they appear in the dates in character.\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIt is often the case that date values are not formatted in the way you want (e.g., when you are creating figures).\nWhile you can use string manipulation functions to reformat dates (which we learn next in this lecture), it is easier to just use the format() function.\n\n\n#--- NOT RUN ---#  \nformat(Date, format)\n\n\nYou can use the same rule for the format argument as the one we saw earlier when using as.Date().\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nYou can extract components (year, month, day) from a Date object using various helper functions offered by lubridate.\n\nyear(): year\nmonth(): month\nmday(): day of month\nyday(): day of year\nwday(): day of week\n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nUnlike dates in character, you can do some math on Date objects.\n\naddition and subtractionsequence of datesfilter (logical evaluation)\n\n\nYou can use years(), months(), days() from the lubridate package to add specified years, months, and days, respectively.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can use seq() to create a sequence of dates, where the incremental step is defined by the by option.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#string-manipulation",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#string-manipulation",
    "title": "07-1: Miscellaneous Useful Functions and Tips",
    "section": "String manipulation",
    "text": "String manipulation\n\nIntroductionConcatenateSplitReplaceDetectletter casepadding\n\n\n\n\nPackage\nFor string (character) manipulation, we use the stringr package, which is part of the tidyverse package. So, you have installed it already.\nstringr is loaded automatically when you load tidyverse. So, just load tidyverse.\n\nlibrary(tidyverse)  \n\n\nResources\n\nstringr cheatsheet\nstringr packagedown website\n\n\nFunctions\nHere are the select functions we learn in this lecture:\n\njoin and split\n\nstringr::str_c()\nstringr::str_split() (tidyr::separate())\n\nmutate strings\n\nstringr::str_replace()\n\ndetect matches\n\nstringr::str_detect()\n\nmanage lengths\n\nstringr::str_trim()\nstringr::str_pad()\n\n\n\n\n\n\n\nstringr::str_c() lets you concatenate a vector of strings. It is basically the same as paste().\n\njoin 1join 2join 3use cases\n\n\nconcatenate\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\norder matters\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nseparator\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nmore than two strings\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\na string and a vector of strings\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEach of the vector elements (verbs) are concatenated with a string (\"R\")\nThe separator (\"+\") applied to all the vector elements\n\n\ncollapsing a vector of strings to a single string\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe collapse option collapse all the vector elements into a single string with the collapse separator (here, %) placed between the individual vector elements\nsep = \"+\" is applied when concatenating a vector of strings and a string, and collapse = \"%\" is applied when concatenating the resulting vector of strings.\n\n\n\ntwo vectors of equal length\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nnth element of a vector (software_types) is met with n the element of the other vector (verbs).\n\n\ntwo vectors of different lengths\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nnth element of a vector (software_types) is met with n the element of the other vector (verbs) with verbs recycled for the elements in software_type that are missing positional matches.\n\n\nall combinations\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ntake advantage of the recycling feature to create all possible combinations of values\n\n\n\n\nConcatenating string variables in a datasetReading files\n\n\nSometimes, you want to concatenate two (or more) string variables into one variable.\nFor example, suppose you would like to combine pizza size and type into a single variable to make it easier to create faceted figures by size-type.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can use stringr::str_c() to create a vector of file names that have a common pattern.\nFor example suppose you have files that are named following this convention: “corn_yield_X.csv”, where X represents year.\nYou have such csv files starting from 2000 to 2020. Then,\n\nfile_names &lt;- stringr::str_c(\"corn_yield_\", 2000:2020, \".csv\")  \n\n\nhead(file_names) \n\n[1] \"corn_yield_2000.csv\" \"corn_yield_2001.csv\" \"corn_yield_2002.csv\"\n[4] \"corn_yield_2003.csv\" \"corn_yield_2004.csv\" \"corn_yield_2005.csv\"\n\n\nNow, you can easily read each of them iteratively using a loop.\n\n\n\n\n\n\n\n\n\n\nstringr::str_split() splits a string based on a pattern you provide:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nBut, if you are splitting a variable into two variables, tidyr::separate() is a better option.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nIntroductionUse case\n\n\nHow\nYou can use stringr::str_replace() to replace parts of the texts matched with the user-specified texts.\n\n\n#--- Syntax ---#\nstringr::str_replace(string, pattern, replacement)\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNote that the only the first occurrence of “rock” in each of the string vector element was replaced with “rock big time.”\nYou need to use stringr::str_replace_all() to replace all the occurrences.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSuppose you would like to have a particular format of date in a figure you are trying to create using pizzaplace: e.g., 07/08/20 (month, day, year without the first 2 digits).\nPretend that date_text is the variable that indicates date and it looks like this:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSo, you would like to replace “20” with “” (nothing).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow you can create a figure with the dates in the desired format. From pizzaplace, you could have just done this:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\nYou can use stringr::str_detect() to check if a user-specified texts are part of strings.\nIt takes a vector of strings and a text pattern, and then return a vector of TRUE/FALSE.\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nuse cases\n\nget the list of file namesDefine a group from a variable\n\n\nFirst clone this repository.\nInside data/data-for-loop-demo, there are two sets of files in a single folder: corn_experiment_x.rds and soy_experiment_y.rds, where both x and y range from 1 to 30.\nYou want to read only the soy files.\nFirst, let’s get the name of the whole list of files in the working directory:\n\nall_files &lt;- \n  list.files(\n    \"supplementary-material/data/data-for-loop-demo\",\n    full.names = TRUE\n  )\n\nhead(all_files)\n\ncharacter(0)\n\ntail(all_files) \n\ncharacter(0)\n\n\nNow use stringr::str_detect() to find which elements of all_files include “soy.”\n\nis_soy &lt;- stringr::str_detect(all_files, \"soy\")  \n\nOkay so, here is the list of all the “soy” files:\n\nall_files[is_soy]\n\ncharacter(0)\n\n\nNow, you can loop to read all the files.\n\n(\nsoy_data &lt;- \n  lapply(all_files, \\(x) readRDS(x)) %&gt;%\n  bind_rows()\n)\n\n# A tibble: 0 × 0\n\n\n\n\nConsider the following dataset of plant genes.\n\ngene_data &lt;- expand.grid(\n  id = c(\"Zm_1\", \"Zm_2\"), \n  gene = c(\"20_WW_BL_TP1\", \"20_WW_BL_TP\", \"20_WW_ML_TP1\", \"20_WW_ML_TP\", \"20_WW_TL_TP1\", \"20_WW_TL_TP3\")\n) \n\n\n\n     id         gene\n1  Zm_1 20_WW_BL_TP1\n2  Zm_2 20_WW_BL_TP1\n3  Zm_1  20_WW_BL_TP\n4  Zm_2  20_WW_BL_TP\n5  Zm_1 20_WW_ML_TP1\n6  Zm_2 20_WW_ML_TP1\n7  Zm_1  20_WW_ML_TP\n8  Zm_2  20_WW_ML_TP\n9  Zm_1 20_WW_TL_TP1\n10 Zm_2 20_WW_TL_TP1\n11 Zm_1 20_WW_TL_TP3\n12 Zm_2 20_WW_TL_TP3\n\n\nThere are three different types of genes: those that have _BL_,_ML_, and _TL_. The objective here is to make a variable that indicates gene group from the gene variable.\n\ngene_data %&gt;% \n  mutate(gene_group = case_when(\n    stringr::str_detect(gene, \"_BL_\") ~ \"BL\",\n    stringr::str_detect(gene, \"_ML_\") ~ \"ML\",\n    stringr::str_detect(gene, \"_TL_\") ~ \"TL\"\n  ))\n\n     id         gene gene_group\n1  Zm_1 20_WW_BL_TP1         BL\n2  Zm_2 20_WW_BL_TP1         BL\n3  Zm_1  20_WW_BL_TP         BL\n4  Zm_2  20_WW_BL_TP         BL\n5  Zm_1 20_WW_ML_TP1         ML\n6  Zm_2 20_WW_ML_TP1         ML\n7  Zm_1  20_WW_ML_TP         ML\n8  Zm_2  20_WW_ML_TP         ML\n9  Zm_1 20_WW_TL_TP1         TL\n10 Zm_2 20_WW_TL_TP1         TL\n11 Zm_1 20_WW_TL_TP3         TL\n12 Zm_2 20_WW_TL_TP3         TL\n\n\n\n\n\n\n\n\nHere are the collection of functions that let you change the letter case of strings.\nTo upper case\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTo lower case\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOnly the first letter is capitalized\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can pad strings with symbols of your choice so the resulting string are of the length you specify.\n\n#--- NOT RUN ---#\nstringr::str_pad(strings, string length, side, padding symbol)\n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n:::"
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#exercises",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#exercises",
    "title": "07-1: Miscellaneous Useful Functions and Tips",
    "section": "Exercises",
    "text": "Exercises\n\nData preparationExercise 1Exercise 2\n\n\nWe will work with the following data:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUse stringr::str_c() to combine, year, month, and day using “-” as the separator and convert the combined text to Date using lubridate.\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ndate_data %&gt;%\n  mutate(date_as_str = str_c(year, month, day, sep = \"-\")) %&gt;%\n  mutate(date_as_Date = ymd(date_as_str)) %&gt;%\n  select(date_as_Date)\n\n\n\n\n\n\n\n\nUsing Date math to recover the dates from year and day_of_year.\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ndate_data %&gt;%\n  mutate(first_day_of_year = ymd(str_c(year, \"01-01\"))) %&gt;%\n  mutate(date = first_day_of_year + day_of_year - 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#make-your-figures-presentable-to-others-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#make-your-figures-presentable-to-others-1",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Make your figures presentable to others",
    "text": "Make your figures presentable to others\n\nMotivationtwo types of operationscontent-alteringtheme-alteringNote\n\n\n\nFigures we have created so far cannot be used for formal presentations or publications. They are simply too crude.\nWe need fine-tune raw figures before they are publishable.\nYou can control virtually every element of a figure under the ggplot2 framework.\nTake a look at here for the complete list of options you can use to modify the theme of figures\n\n\n\n\n\nKey\n\n\nThe most important thing is actually to know which part of a figure a theme option refers to (e.g., axis.text)\n\n\n\n\n\n\nTwo types of operations\nOperations to make your figures presentable can be categorized into two types:\n\nContent-altering\nTheme-altering\n\n\nExamples\nFor the y-axis title,\n\nThe axis title text itself (say “Corn Yield (bu/acre)”) falls under the content category.\nThe position of or the font size of the axis-title fall under the theme category\n\nThe content itself does not change when theme is altered.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOriginal\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAltered\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nOriginal\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAltered\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDistinctions between the two types of actions are not always clear\nBut, typically, you use\n\nscale_*() function series to alter contents\ntheme() function to alter the theme\n\nNote that there are shorthand convenience functions to alter figure contents for commonly altered parts of figures"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#axes-content",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#axes-content",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Axes content",
    "text": "Axes content\n\nPreparationHowaxis titlelimitbreaks and labelsExercise\n\n\nWe are going to build on this figure in this section:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe can use\n\nscale_x_discrete()/scale_x_continuous() for x-axis\nscale_y_discrete()/scale_y_continuous() for y-axis\n\nto control the following elements of axes:\n\nname: an axis title\nlimit: the range of an axis\nbreaks: axis ticks positions\nlabel: axis texts at ticks\n\n\n\n\nNote\n\n\n\nWe use scale_x_discrete() if x is a discrete variable (not numeric) and scale_x_continuous() if x is a continuous variable (numeric).\nThe same applies for y.\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOr just this,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOr just,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOr,\nYou can filter the data first and then use the filtered data.\n\n\n\nbreaks: determines where the ticks are located\nlabels: defines the texts at the ticks\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nInstructionExercise 1Exercise 2\n\n\nRun the following code to create gg_delay, which you will build on.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nChange the axes content to create the figure on the right using scale_x_continuous() and scale_y_continuous().\nHere are the list of changes you need to make:\n\nx-axis\n\nchange the x-axis title to “Month”\nchange the limit of the x-axis title to 4 through 8\nchange the the breaks and their labels of the x-axis ticks (breaks) to 4 through 8\n\ny-axis\n\nchange the y-axis title to “Average Arrival Delay (minutes)”\nchange the limit of the y-axis title to 0 through 25\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ngg_delay + \n  scale_x_continuous(\n    name = \"Month\",\n    limit = c(4, 8),\n    breaks = 4:8\n  ) +\n  scale_y_continuous(\n    name = \"Average Arrival Delay (minutes)\",\n    limit = c(0, 25)\n  )\n\n\n\n\n\n\n\n\n\nChange the axes content to create the figure on the right. But, use scale_x_continuous() only for changing the x-axis breaks.\nHere are the list of changes you need to make:\n\nx-axis\n\nchange the x-axis title to “Month”\nchange the limit of the x-axis title to 4 through 8\nchange the the breaks and their labels of the x-axis ticks (breaks) to 4 through 8\n\ny-axis\n\nchange the y-axis title to “Average Arrival Delay (minutes)”\nchange the limit of the y-axis title to 0 through 25\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ngg_delay +\n  scale_x_continuous(\n    name = \"Month\",\n    limit = c(4, 8),\n    breaks = 4:8\n  ) +\n  scale_y_continuous(\n    name = \"Average Arrival Delay (minutes)\",\n    limit = c(0, 25)\n  )"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#legends-content",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#legends-content",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Legends content",
    "text": "Legends content\n\nPreparationTitleFill colorTitle positionwrappingExercise\n\n\nWe are going to build on this figure in this section:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nInstructionExercise\n\n\nRun the following code to create gg_delay, which you will build on.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nChange the legend contents to create the figure on the right. Using scale_*_brewer(). You need to identify what goes into * in scale_*_brewer().\nHere are the list of changes you need to make:\n\nchange the legend title to “Airports in NY”\nchange the the legend title position to “bottom”\nchange the legend items to be spread in 3 columns\nchange the color palette to Set2\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ngg_delay + \n  scale_color_brewer(\n    name = \"Airports in NY\",\n    palette = \"Set2\",\n    guide = guide_legend(\n      title.position = \"bottom\",\n      ncol = 3\n    )\n  )"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#theme",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#theme",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Theme",
    "text": "Theme\n\nNaming rulesCommon functions\n\n\nWhen specifying the theme of figure elements, it is good to know the naming convention of figure elements:\nFor example:\n\naxis.title\n\nThis refers to the title of both x- and y-axis. Any aesthetic theme you apply to this element will be reflected on the title of both x- and y-axis.\n\naxis.title.x\n\nThis refers to the title of only x-axis. Any aesthetic theme you apply to this element will be reflected on the title of only x-axis.\nSo, basically appending .name narrows down the scope of the figure elements the element name refers to.\n\n\nThere are common functions we use to specify the aesthetic nature of figure elements based on the type of the elements:\n\n\nelement_text(): for text elements like axis.text, axis.title, legend.text\n\nInside the function, you specify things like font size, font family, angle, etc.\n\nelement_rect(): for box-like elements like legend.background, plot.background, strip.background\n\nInside the function, you specify things like font background color, border line color, etc.\n\nelement_line(): for line elements like panel.grid.major, axis.line.x\n\nInside the function, you specify things like line thickness, line color, etc.\n\nelement_blank(): any components\n\nIt makes the specified component disappear.\n\nunit(): for attributes of figure elements like legend.key.width, legend.box.spacing"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#axis-theme",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#axis-theme",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Axis theme",
    "text": "Axis theme\n\nPreparationtitle and textlineticks\n\n\nWe are going to build on this figure in this section:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#legends-theme",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#legends-theme",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Legends theme",
    "text": "Legends theme\n\nHowPreparationpositionkeyfontbackground\n\n\nWe can use them() to change the aesthetics of legends. Some of the elements include\n\ntitle\nposition\nkey\ntext\ndirection\nbackground\n\nSee here for the full list of options related to legends.\nWe will discuss how to change the color scheme of legends later in much detail.\n\n\nThis is what we will build on:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#pre-made-and-customized-themes",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#pre-made-and-customized-themes",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Pre-made and customized themes",
    "text": "Pre-made and customized themes\n\nInstructionExamplesBuild on a pre-made themeCustom theme\n\n\nThere are a bunch of pre-made themes from the ggplot2 and ggthemes packages that can quickly change how figures look.\nInstall and library ggthemes package first:\n\n#--- install ---#\ninstall.packages(\"ggthemes\") \n\n#--- library ---#\nlibrary(\"ggthemes\") \n\n\nSee the full list of pre-made themes here.\n\n\n\nbwvoidstatagdocseconomistexcel\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nHowPreparationminor gridmajor grid\n\n\nYou can simply override parts of the pre-made theme by adding theme options like this (see more on this here):\n\ng_axis +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank()\n  )\n\n\nSo, you can pick the pre-made theme that looks the closest to what you would like, and then add on theme elements to the part you do not like.\n\n\nWe will build from this figure:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSee here for the line types available.\n\n\n\n\n\n\n\nIntroductionComparetheme_set()\n\n\nYou can create your own theme, save it, and then use it later.\nHere, I am creating my own theme off of theme_economist(), where axis titles and major panel grids are absent.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can add my_theme like below just like a regular pre-made theme:\n\nggplot(data = weather) +\n  geom_boxplot(\n    aes(y = temp, x = factor(month))\n  ) +\n  my_theme\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nIf you would like to apply your theme to all the figures you generate, then use theme_set() like below:\n\ntheme_set(my_theme)\n\nAfter this, all of your figures will follow my_theme."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#faceted-figure-theme",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#faceted-figure-theme",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Faceted figure theme",
    "text": "Faceted figure theme\n\nInstructionPreparationtextbackgroundpanel spacing\n\n\nFaceted figures have strip elements that do no exist for non-faceted figures like\n\nstrip.background\nstrip.placement\nstrip.text\npanel.spacing\n\nWe learn how to modify these elements.\n\n\nCreate a dataset for this section:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a faceted figure we will build on:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#more-flexible-color-options-with-hex",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#more-flexible-color-options-with-hex",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "More flexible color options with HEX",
    "text": "More flexible color options with HEX\n\nInstructionExample\n\n\nInstead of naming the color you want to use, you can use HEX color codes instead.\n\n\n\n\nDirection\n\n\n\nVisit here\nClick on any color you like\nThen you will see two sets of color gradients (thicker and lighter from the color you picked)\nPick the color you like from the color bar and copy the HEX color code beneath the color you picked\n\n\n\n\n\nYou could alternatively use the RGB codes, but I do not see any reasons to do so because the use of HEX codes is sufficient.\n\n\nYou can use HEX color codes for any color-related elements in a figure.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nTry\n\n\nPick a Hex color and try it yourself."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#color-scale",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#color-scale",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Color scale",
    "text": "Color scale\n\nIntro 1Intro 2\n\n\nThe choice of color schemes for your figures are very important (not so much for academic journals …)\nWe use scale_A_B() functions to for color specification:\n\nA is the name of aesthetic (color or fill)\nB is the type of color specification method\n\n\n\nFor example, consider the following code:\nSince it is the color aesthetic that we want to work on, A = color.\nThere are many options for B. Indeed, there are so many that, it gets confusing!\n\nscale_color_brewer() (discrete)\nscale_color_distiller() (continuous)\nscale_color_viridis_d() (discrete)\nscale_color_viridis_c() (continuous)\nscale_color_continuous() (continuous)\nscale_color_discrete() (discrete)\nscale_color_hue() (discrete)\n\nOne thing to remember is that you need to be aware of whether the aesthetic variable (here, corn_yield) is numeric or not as that determines acceptable type of B."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#viridis",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#viridis",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Viridis",
    "text": "Viridis\n\nInstructiontypesExample 1Example 2reverse\n\n\nWe have four scale functions for Viridis color map:\n\nscale_color_viridis_c(): for color aesthetic with a continuous variable\nscale_color_viridis_d(): for color aesthetic with a discrete variable\nscale_fill_viridis_c(): for fill aesthetic with a continuous variable\nscale_fill_viridis_d(): for fill aesthetic with a discrete variable\n\nThere are five color scheme types under the Viridis color map:\n\nmagma\ninferno\nplasma\nviridis\nciviris\n\nYou can use option to specify which one of them you want to use inside the scale functions.\nThese color schemes are color-blind sage.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#rcolorbrewer",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#rcolorbrewer",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "RColorBrewer",
    "text": "RColorBrewer\n\nInstructiondifferent types of setsExample 1Example 2\n\n\nRColorBrewer package provides a number of color palettes of three types:\n\nsequential: suitable for a variable that has ordinal meaning (e.g., temperature, precipitation)\ndiverging: suitable for variables that take both negative and positive values (e.g., changes in groundwater level)\nqualitative: suitable for qualitative or categorical variable\n\nWe use two types of scale functions for the palettes:\n\nscale_A_brewer(): for discrete aesthetic variable\nscale_A_distiller(): for continuous aesthetic variable\n\n\n\n\nsequentialdivergingqualitative\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nGenerate a dataset for visualization:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a figure:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#set-color-scale-manually",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#set-color-scale-manually",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Set color scale manually",
    "text": "Set color scale manually\n\ndiscretecontinuous\n\n\n\nInstructionExample\n\n\nSometimes, you just want to pick colors yourself. In that case, you can use\n\nscale_color_manual()\nscale_fill_manual()\n\nInside the scale_*_manual() function, you provide a named vector where a sequence of group names and their corresponding colors are specified to the scale function via the values option.\nFor example, consider the box plot of corn yield for four states: Colorado, Kansas, Nebraska, and South Dakota. Then, a sample named vector looks like this:\n\n(\ncols &lt;- c(\"Colorado\" = \"red\", \"Nebraska\" = \"blue\", \"Kansas\" = \"orange\", \"South Dakota\" = \"#ff0080\")\n)\n\n\nNow that a named vector is created, you can do the following to impose the color scheme you just defined.\n\nscale_fill_manual(values = cols)\n\n\n\nDefine a named color vector:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a figure:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nInstructionExample\n\n\nHow\nYou can use scale_*_gradientn() to create your own continuous color scale.\n\nSyntax\n\n`scale_*_gradientn(colors, values)`\n\n\ncolors: a vector of colors\nvalues: a vector of numeric numbers ranging from 0 to 1\nlimits: define the lower and upper bounds of the scale bar\n\nnth value of colors is used for the interval defined by nth and n+1th values in values.\n\n\nCreate a figure:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this example, green is dominant in the color bar because the interval [0.2, 0.9] is for \"green\" in colors, where the interval represents [130, 235] ([100 + (250-100), 100 + (250-100)]).\n\n\n\n\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#placing-more-information-in-one-figure-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#placing-more-information-in-one-figure-1",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Placing more information in one figure",
    "text": "Placing more information in one figure\n\nMotivationHowExamplesExercises\n\n\nSo far, we have learned the basics of ggplot2 and how to create popular types of figures. We can make a figure much more informative by making its aesthetics data-dependent.\nFor example, suppose you are interested in comparing the history of irrigated corn yield by state in a line plot. So, you want to create a line for each state and make the lines distinguishable so the readers know which line is for which state like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe can make the aesthetics of a figure data-dependent by specifying which variable you use for aesthetics differentiation  INSIDE aes().\nHere is an example:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this code, color = state_name is inside aes() and it tells R to divide the data into the groups of State and draw a line by state_name (by state) where the lines are color-differentiated.\nA legend is automatically generated.\n\n\n\nDataExample 1Example 2Example 3Example 4\n\n\nCreate a data set of corn yield by state-year first:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nInstructionExercise 1Exercise 2\n\n\nThis exercise use the diamonds dataset from the ggplot2() package. First, load the dataset and extract observations with Premium cut whose color is one of E, I, and F:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing premium, create a scatter plot of price (y-axis) against depth (x-axis) by clarity:\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_point(aes(y = price, x = depth, color = clarity))\n\n\n\n\n\n\n\nUsing premium, create density plots of carat by color (set alpha to 0.5):\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_density(aes(x = carat, fill = color), alpha = 0.5)"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#faceting-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#faceting-1",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Faceting",
    "text": "Faceting\n\nMotivationHowTwo-wayfacet_grid()Strip labelExercises\n\n\nSometimes, you would like to visualize information across groups on separate panels.\n\n\nToo much information in one panel?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOn separate panels (faceting)?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nWe can make faceted figures by adding either facet_wrap or facet_grid() in which you specify which variable to use for faceting.\nHere is an example:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIn this code, facet_wrap(state_name ~ .) is added to a simple boxplot, which tells R to make a boxplot by state_name (state).\n\n\n\n\nNote\n\n\n. in state_name ~ . means non (facet by no variable).\n\n\n\n\n\n\nWhat?Another example\n\n\nTwo-way faceting will\n\ndivide the data into groups where each group has a unique combination of the two faceting variables\ncreate a plot for each group\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFilter county_yield to those in 2017 and 2018.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCreate a faceted density plots.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\ncomparefacet_grid()order mattersscale\n\n\n\n\nfacet_wrap\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nfacet_grid\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nUnlike facet_wrap(), which side you put faceting variables matters a lot.\n\nleft hand side: rows\nright hand side: columns\n\nIn the code above, state_name values become the rows, and year values become columns.\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nGuidefree xfree yboth free\n\n\nfacet_grid() allows\n\nthe figures in different columns to have different scales for the x-axis (figures in the same column have the same scale for the x-axis)\nthe figures in different rows to have different scales for the y-axis (figures in the same rows have the same scale for the x-axis)\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\n\nCreate a variable that has the values you want to use as labels and use it as a faceting variable:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nExercise 1Exercise 2\n\n\n\n\nUsing premium, create scatter plots of price (y-axis) against carat (x-axis) by color on separate panels as shown on the right.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_point(aes(x = carat, y = price)) +\n  facet_grid(color ~ .)\n\n\n\n\n\n\n\n\n\n\nUsing premium, create histogram of carat by color and clarity on separate panels as shown on the right.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_histogram(aes(x = carat)) +\n  facet_grid(color ~ clarity)"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#preparing-datasets-for-visualization",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#preparing-datasets-for-visualization",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Preparing datasets for visualization",
    "text": "Preparing datasets for visualization\n\nLong-format neededWide v.s. Long\n\n\nWe have seen\n\nfigures where its main elements (points, lines, boxes, etc) are made color differentiated (e.g., with aes(color = var) inside the geom_*() function)\nfaceted figures\n\n\n\n\nImportant\n\n\nThe dataset has to be in long format to create these types of figures!!\n\n\n\n\n\n\nFor example consider the following dataset in a wide format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis dataset has county-level yields for Nebraska, Colorado, and Kansas stored in variables named 2000 and 2001 (they themselves represent years).\nImagine creating boxplots of corn yield fill color-differentiated by state and faceted by year….You actually cannot specify facet_grid() properly because you do not have a single variable that represents year.\nYou will find that reshaping wide datasets using pivot_longer() is very useful in creating figures."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#multiple-datasets-in-one-figure-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#multiple-datasets-in-one-figure-1",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Multiple datasets in one figure",
    "text": "Multiple datasets in one figure\n\nGlobal v.s. localExample 1Example 2Use multiple datasets\n\n\n\n\n\nImportant\n\n\n\n(Global) When a dataset is specified inside ggplot(), then the dataset is used in  ALL  of the subsequent geom_*() unless otherwise specified\n(Local) When a dataset is specified inside of a geom_*(), the dataset is used only for the geom_*() over-riding the global dataset set inside ggplot().\n\n\n\n\n\n\nThis works with county_yield used in both geom_point() and geom_smooth().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis does not work because no global dataset is set inside ggplot() and no dataset is supplied to geom_smooth().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTo use multiple datasets inside a single ggplot object (or a figure), you just need to specify what dataset to use locally inside individual geom_*()s.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#learning-objectives",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#learning-objectives",
    "title": "01-1: Introduction to R",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nbecome familiar with programming\nbecome capable of using R software to conduct research independently\n\nmanipulate data\nvisualize data\nreport results\nspatial data management"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#table-of-contents",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#table-of-contents",
    "title": "01-1: Introduction to R",
    "section": "Table of contents",
    "text": "Table of contents\n\nIntroduction to R and RStudio\nVarious object types\nFunctions and packages\nSome fundamentals on vector, matrix, list, and data.frame"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#r",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#r",
    "title": "01-1: Introduction to R",
    "section": "R",
    "text": "R\n\na very popular statistical programming language used in academia and industry\n\nstarted out as software to do statistics, designed by a number of statisticians\nis open-source and free\nhas been and is evolving rapidly by the contributions of its users\nstate-of-the-art statistical methods (e.g., machine learning algorithms) written by the developers of the methods\ngeographic information system (GIS)\nbig data handling and analysis"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#rstudio",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#rstudio",
    "title": "01-1: Introduction to R",
    "section": "RStudio",
    "text": "RStudio\n\nR has a terrible graphic user interface\nRStudio is by far the most popular graphic user interface of R\n\n\nR User Interface"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#install-r-and-rstudio",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#install-r-and-rstudio",
    "title": "01-1: Introduction to R",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\n\nInstall R\nInstall RStudio"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#introduction-to-rstudio",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#introduction-to-rstudio",
    "title": "01-1: Introduction to R",
    "section": "Introduction to RStudio",
    "text": "Introduction to RStudio\nFour panes\n\nR script (upper left)\nConsole (lower left)\nEnvironment (upper right)\nFiles, plots, packages, and help (lower right)\n\nSmall tips\n\nAppearance\nPane Layout"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#objectives",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#objectives",
    "title": "01-1: Introduction to R",
    "section": "Objectives",
    "text": "Objectives\nLearn how to\n\ndo basic mathematical operations\ndefine objects in R\nlearn different object types\nuse RStudio at the same time"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#basic-element-types-atomic-mode",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#basic-element-types-atomic-mode",
    "title": "01-1: Introduction to R",
    "section": "Basic element types (atomic mode)",
    "text": "Basic element types (atomic mode)\n\ninteger: e.g., 1, 3,\n\nnumeric (double): e.g., 1, 1.3\ncomplex:\nlogical (boolean): true or false\ncharacter: combination of letters (numerical operations not allowed)"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#basic-arithmetic-r-as-a-calculator",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#basic-arithmetic-r-as-a-calculator",
    "title": "01-1: Introduction to R",
    "section": "Basic arithmetic: R as a calculator",
    "text": "Basic arithmetic: R as a calculator\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nRStudio Tip\n\n\nYou can run the selected codes by hitting\n\nMac: command + enter\nWindows: Control + enter"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#logical-values-and-operators",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#logical-values-and-operators",
    "title": "01-1: Introduction to R",
    "section": "logical values and operators",
    "text": "logical values and operators\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#character",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#character",
    "title": "01-1: Introduction to R",
    "section": "Character",
    "text": "Character\nContents enclosed by double (or single) quotation marks will be recognized as characters.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou cannot do addition using characters\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe will learn string manipulations later using the stringr package."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#assigning-contents-to-an-object",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#assigning-contents-to-an-object",
    "title": "01-1: Introduction to R",
    "section": "Assigning contents to an object",
    "text": "Assigning contents to an object\n\nHowExampleObject evaluationMore examplesNotes\n\n\n\nYou can assign contents (numeric numbers, character, boolean, etc) to an object on R and reuse it later using either &lt;- or =.\n\n\nobject_name &lt;- contents\nobject_name = contents\n\n\n\nIt does not really matter which of &lt;- or = to use. You should pick whichever makes sense for you (though it is often recommended to use &lt;-). But, it is a good idea to be consistent.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNotice that these objects are now in the list of objects on the environment tab of RStudio.\n\n\n\nNote\n\n\nYou can insert the assignment operator (&lt;-) by hitting\n\nMac: Option + -\nWindows Alt + -\n\n\n\n\n\n\nOnce objects are created, you can evaluate them on the console to see what is inside:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nI often ask you to evaluate an R object. That just means looking inside the R object to see what is inside.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSeveral things to remember about assignment:\n\nIf you assign contents to an object of the same name, the object that had the same name will be overwritten\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nObject names cannot start with a numeric number. Try the following:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou cannot use a reserved word as the name of an object (complete list found here)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#objects",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#objects",
    "title": "01-1: Introduction to R",
    "section": "Objects",
    "text": "Objects\n\nBasicsVectorListMatrixdata.frameRecognizing the class\n\n\n\nR is an object-oriented programming (OOP), which basically means:\n\n“Everything is an object and everything has a name.”\n\nR has many different object types (classes)\n\nvector\nmatrix\ndata.frame\nlist\nfunction\n\n\n\n\n\n\n\n\nDefinition\n\n\nA vectors is a class of object that consists of elements of the same kind (it can have only one type of elements). You use c() to create a vector.\n\n\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDifferent modes?\nWhat if we mix elements of different mode\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAll the numeric values are converted to characters.\n\n\n\n\n\n\nDefinition\n\n\nA list is a class of object that consists of elements of mixed types.\n\n\n\n\nExample\n\nA list is very flexible. It can hold basically any type of R objects as its elements.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe will see more complex examples later.\n\n\n\n\n\n\n\nDefinition\n\n\nA matrix is a class of object that consists of elements of the same kind (it can have only one element) stored in a two-dimensional array.\n\n\n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ndata.frame is like a matrix (or a list of columns)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThere are different kinds of objects that are like “data.frame”\n\ntibble\ndata.table\n\nWe will talk about some of them later.\n\n\n\nWhy?HowVisual inspection\n\n\nIt is critical to recognize the class of the objects:\n\nthe same function does different things depending on the class of the object to which the function is applied\n\nsome functions work on some object classes, but not on others\n\nMany of the errors you will encounter while working on R has something to do with applying functions that are not applicable to the objects you are working on!\n\n\nUse class, typeof, and str commands to know more about what kind of objects you are dealing with:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou could also use View() function for visual inspection:\n\nView(yield_data)"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#function",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#function",
    "title": "01-1: Introduction to R",
    "section": "Function",
    "text": "Function\n\nWhat is a function?Why functions?Some other useful functionsExercises\n\n\nA function takes R objects (vector, data.frame, etc), processes them, and returns R objects\n\nExample:\nmin() takes a vector of values as an argument and returns the minimum of all the values in the vector\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nFunctions (both base and user-written) are what makes R compelling to use as major statistical and programming software!\nIndeed, this course is pretty much all about learning useful functions that make your life easier\nWe will learn lots of functions that are made available through user-written packages\n\n\n\n\ncreate a sequence of values\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nrepeat values\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nsum values\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nfind the length of an vector\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ngenerate a vector (call it \\(x\\)) that starts from 1 and increase by 2 until 99\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ncalculate the sample mean of \\(x\\)\n\n\\(\\frac{1}{n}\\sum_{i=1}^n x_i\\)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ncalculate the sample variance of \\(x\\)\n\n\\(\\frac{1}{n}\\sum_{i=1}^n (x_i-\\bar{x})^2\\), where \\(\\bar{x}\\) is the sample mean\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#package",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#package",
    "title": "01-1: Introduction to R",
    "section": "Package",
    "text": "Package\n\nWhat are packages?How to use them?\n\n\nA drawer in your work space (R environment) that has specialized tools (functions) to complete tasks.\n\nExample packages:\n\ndplyr (data wrangling)\ndata.table (data wrangling)\nggplot2 (data visualization)\nsf (spatial vector data handling)\nraster (spatial raster data handling)\nstars (spatiotemporal data handling)\n\n\n\n\nBefore you use tools (functions) in the drawer (package), you need to buy (install) it first. You can install a package using the following syntax:\n\n\ninstall.packages(\"package name\")\n\n\n\nFor example,\n\n\ninstall.packages(\"ggplot2\")\n\n\n\nYou need to bring the drawer (package) to your working space (R environment) by using the library() function:\n\n\nlibrary(ggplot2)\n\n\n\nNow, you can start using specialized tools (functions) in the drawer (package)!!"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#working-with-r-or-any-computer-programs",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#working-with-r-or-any-computer-programs",
    "title": "01-1: Introduction to R",
    "section": "Working with R (or any computer programs)",
    "text": "Working with R (or any computer programs)\n\nYou are the architect who has the blueprint of the final product, but does not have an ability to build specific pieces by yourself\nYou work with one worker (R) who can build specific pieces perfectly without any error  if given right tools and instructions \nThis worker is weird. If you do not give right tools or your instruction is wrong, he/she will speak up and tell you there has been an error. He/she will not try to figure out how things could have been done differently by himself/herself.\nYour job is to provide the right tools and instructions to the worker (R), and correct your instructions when you found out you made a mistake (debugging)"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#vector-1",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#vector-1",
    "title": "01-1: Introduction to R",
    "section": "Vector",
    "text": "Vector\n\nPrepArithmetic operationsAccess elements\n\n\nLet’s define two vectors to work with\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nVector arithmetic operations happen element by element!\n\n\n\n\n\n\n\nTo access element(s) of a vector, you use [] like below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can access multiple elements of a vector\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#matrix-1",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#matrix-1",
    "title": "01-1: Introduction to R",
    "section": "Matrix",
    "text": "Matrix\n\nPrepArithmetic operationsOther operationsAccess elements\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTo access element(s) of a matrix, you use [] just like we did for a vector. But, now you have two arguments inside [].\n\nmatrix[indices for rows, indices for columns]  \n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#list-1",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#list-1",
    "title": "01-1: Introduction to R",
    "section": "List",
    "text": "List\n\nAccess elements using [[]]Access elements using $\n\n\nTo access element(s) of a matrix, you can use either [[]] operator for accessing a single element and use [] for multiple elements.\nExample: single element\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nExample: multiple elements\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can also use $ operator to access a single element of a list as long as the element has a name.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#data.frame-1",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#data.frame-1",
    "title": "01-1: Introduction to R",
    "section": "data.frame",
    "text": "data.frame\n\nBasicsAccess parts of a data.frame\n\n\ndata.frame (and its relatives)\n\nis the most common object type we use.\nis a special kind of list of vectors that are of the same length that makes a matrix-like structure\nshares properties of both the matrix and the list\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAccessing parts of a data.frame works like accessing elements of a matrix or list.\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n We will spend lots of time on how to do data wrangling on data.frames using the tidyverse package!"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#examples",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#examples",
    "title": "01-1: Introduction to R",
    "section": "Examples",
    "text": "Examples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n We will spend lots of time on how to do data wrangling on data.frames using the tidyverse package!"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#next-class-quarto",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#next-class-quarto",
    "title": "01-1: Introduction to R",
    "section": "Next class: Quarto",
    "text": "Next class: Quarto\n\n\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "exercises/1-3-data-reshaping.html",
    "href": "exercises/1-3-data-reshaping.html",
    "title": "Ex-1-3: Reshape Datasets",
    "section": "",
    "text": "Datasets: crop_data synthetically generated withint R.\nTask: Reshape the economics dataset to wide format using tidyr::pivor_wider(). In doing so, append yield_ to the new column names using the names_prefix option.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nDatasets: the crop_data_wide (crop_data in wide format)\nTask: Reshape the economics dataset to long format using tidyr::pivor_longer(). In doing so, remove yield_ from the column names using the names_prefix option.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-3-data-reshaping.html#problem-1",
    "href": "exercises/1-3-data-reshaping.html#problem-1",
    "title": "Ex-1-3: Reshape Datasets",
    "section": "",
    "text": "Datasets: crop_data synthetically generated withint R.\nTask: Reshape the economics dataset to wide format using tidyr::pivor_wider(). In doing so, append yield_ to the new column names using the names_prefix option.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-3-data-reshaping.html#problem-2",
    "href": "exercises/1-3-data-reshaping.html#problem-2",
    "title": "Ex-1-3: Reshape Datasets",
    "section": "",
    "text": "Datasets: the crop_data_wide (crop_data in wide format)\nTask: Reshape the economics dataset to long format using tidyr::pivor_longer(). In doing so, remove yield_ from the column names using the names_prefix option.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#learning-objectives",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#learning-objectives",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn how to organize your project: folder, codes, data files, etc\nLearn how to organize R codes\nLearn how to use various RStudio tips for efficient programming"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#reproducibility-1",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#reproducibility-1",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nWhat is it?HowHigh v.s. low qualityWhy high-quality reproducible researchCheck list\n\n\nFirst of all, you may have heard of “reproducibility” and “replicability.” While they sometimes are used interchangeably, they mean different things. Here are commonly used definitions of the two terms (Cacioppo et al. 2015).\n\n\n\n\n\nDefinition: Reproducibility\n\n\nA research study is reproducible if anybody (including the author of the study) can generate exactly the same results by using the same materials (e.g., data) and procedures used in the study.\n\n\n\n\n\n\n\n\n\nDefinition: Replicability\n\n\nA research study is replicable if other teams reach the same conclusion by applying the same procedure to the different materials (e.g., data).\n\n\n\n\nThis lecture focuses only on reproducibility and do not deal with replicability.\n\n\n\n\n\n\nMinimum Requirement\n\n\nEvery single action taken during the entire research process is documented in a way that anybody can follow to implement the same actions (no hidden actions) to produce exactly the same results.\n\n\n\n\n\nNote that this does not necessarily mean every single action needs to be computer-programmed and automated. Even if you manually delete rows of data on Excel (highly discouraged), this does not make your research non-reproducible as long as this action is recorded and the original data (before deletion of the rows) are provided because anybody can implement this action.\n\n\nYour project is reproducible if the minimum requirement is satisfied, but is of low-quality if it is too costly/time-consuming to reproduce. A high-quality reproducible project exhibits the following characteristics:\n\nOrganized Project Folder:\nIt maintains a well-structured and organized project folder, making it easy to locate files your are looking for.\n\nStreamlined Automation:\nWorkflows are automated with well-annotated computer programs, simplifying the replication process and providing clarity in the workflow.\n\nComprehensive Documentation:\nRobust documentation, encompassing data and reproduction guidance, ensures transparency, saving time on data interpretation and replication instructions.\n\n\nThe main beneficiaries of reproducible research include:\n\nYou (Y)\nMembers of your team (M)\nThe scientific community (S)\n\n\nHere are the benefits of high-quality reproducible research with their beneficiaries:\n\nScientific Integrity and Error Prevention (S)\nEducational Value (MS)\nRepeatability (YM)\nTransferability (YM)\nReducing Errors (YM)\n\n\n\n\nThe project has organized folder system and all the files (code, manuscript, journal articles in pdf) are placed where they should be\nData is clearly documented\nAll the actions (data processing, analysis, figure and table creation) are computer-programmed without any manual procedures (e.g., deleting rows of a CSV file on Microsoft Excel)\nThe computer programs are well annotated and organized\nAn instruction to reproduce (what computer programs to run in what order) is provided\nThere are no unnecessary files in the project folder"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#how-to-organize-your-project-1",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#how-to-organize-your-project-1",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "How to organize your project",
    "text": "How to organize your project\n\nMotivationRStudio projectFolder organization\n\n\n\nconfusions between objects of the same or similar name (accidentally using the one you do not intend to use)\nwasting memory by holding objects on the global environment that are completely irrelevant to your working project\n\n\n\nWe can initiate an RStudio project with a dedicated folder from within RStudio.\n\nStep 1Step 2Step 3\n\n\n\n\nAt the top right corner of RStudio, navigate through:\n\nProject (None)\n-&gt; New Project…\n-&gt; New Directory\n-&gt; New Project\n\n\n\n\n\n\n\n\n\n\ntype in a directory name\nselect the directory in which the project folder (directory) is going to be created\nhit the create folder button\n\n\n\n\n\n\n\n\n\n\nYou will be automatically taken to a new R session inside the newly-created RStudio project.\nIn this folder you just created, you have a single file named .Rproj (here, it is test.Rproj). It holds information about this project, but you do not have to touch it.\n\n\n\n\n\n\n\n\n\n\n\nHere is a recommended folder organization. You should modify/add folders as you see fit.\n\n\n\nCode: all the codes go in here\n\nDataPrep:\nAnalysis:\n\nData\n\nRaw: place the raw datasets here\nProcessed: save the intermediate datasets here\n\nLiterature: journal articles and other relevant documents\nResults: results (regression, figures, tables)\nWriting: qmd, WORD, Latex files"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#files",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#files",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Files",
    "text": "Files\n\nQuarto (.qmd) or R (.R)?Inside a qmd fileR code styleFile placementFile names\n\n\n\n\n\n\nRecommendation\n\n\nUse a qmd file instead of an R file whenever you write codes\n\n\n\n\n\nIt is much easier to make comments in a qmd file than an R file\nYou can better organize your codes with markdown section headers (e.g., #, ##)\nR crashed at a certain chunk and had to restart R and then run all the R codes up to the problematic chunk? Use Run All Chunks Above button (click on the triangle right to the Run button and select the option, or hit option + command + P).\nEasily move between sections and subsection using the navigator at the bottom lower corner of the source pane\n\n\n\n\n\n\n\n\n\n\nRecommended Stucture\n\n\n\nObjective statement\n\nstate objectives\ninput: state input files and datasets\noutput: state output files and datasets\n\nSetup\n\nset the working directory (if necessary)\nload packages\nload functions\n\nActions\n\nAction 1\nAction 2\n.\n.\n.\nAction n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nDynamically edit the “Objective statement” as its objectives, input, and output are likely to change.\n\n\n\n\n\n\nR code readabilitystyler package\n\n\nYou can write R codes however you would like. But, your code may get more readable to you and others who might read your codes by following a style guideline that is accepted by many R users. There are several popular styles of formatting R codes:\n\ntidyverse style\nGoogle’s R Style Guide\n\nExamples\nHere are some examples of the tidyverse style:\n\nhow to name objects\nspacing\nlong lines\npiping\n\n\n\nThe styler package can help you follow partially the tidyverse coding style.\nOnce the package is installed, you can highlight the lines of codes and hit cmd + shift + A for Mac (ctrl + shift + A for Windows) to reformat the codes to conform with the tidyverse style.\nAlternatively, you can click on Addins in the middle of the menu at the top, and select style selection.\n\n\n\n\n\n\n\n\n\n\nRules 1\n\n\n\nplace all the raw datasets (nothing else) in a designated folder inside the Data/Raw folder\ndo not ever override them, you only read them and keep them intact\n\n\n\n\n\n\n\n\n\nRules 2\n\n\n\nwrite R codes to process (transform, merge, etc) the raw data and save all the R codes inside the Code/DataPrep folder\nsave intermediate R objects or datasets in the Data/Processed folder\ndo not mix codes and datasets in a single folder\n\n\n\n\n\n\n\n\n\nRules 3\n\n\n\nwrite R codes to do analysis and save them in Code/Analysis\nsave the results/outputs (regression tables, figures, tables) in the Results folder\n\n\n\n\n\n\n\n\n\nRules 4\n\n\n\nif you are using qmd to write a journal article or report, put them in the Writing folder (same goes for WORD)\nrefer to figures and tables in the Results folder to integrate them in the output document\n\n\n\n\n\n\n\n\n\n\n\nRecommendation\n\n\n\nName files so that you know what purposes they serve for you later\nPlace numbers as prefix to indicate the order in which they should be run\n\n\n\n\n\n\n\n\n\nExample\n\n\n\nData Collection and Preparation (in Code/DataPrep)\n\n01-1-download-weather-data.R\n01-2-download-political-boundary-data.R\n01-3-summarize-data.R\n01-4-merge-data.R\n\nData Analysis and Results Preparation (in Code/Analysis)\n\n02-1-regression-analysis.R\n02-2-gen-figures-tables.R"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#code-snippets",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#code-snippets",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Code snippets",
    "text": "Code snippets\n\nWhat is it?ExamplesHow to add snippetsContext-specificityVariablesMore examples\n\n\nCode snippets are functions that maps sequence of letters and symbols (short) to other sequence of letters and symbols (more complicated and long)\n\nSyntax\nsnippet (combination of letters to invoke)\n  (what you want to print) \n\n\n\n\nImportant\n\n\nYou need a tab before (what you want to print)\n\n\n\n\n\n\n\npiping operatorassignment operator\n\n\n\nsnippet pi\n  %&gt;% \n\nOnce you add this, you can type “pi” and hit tab (and hit enter if there are other competing shortcuts) to have %&gt;% printed.\n\n\n\nsnippet as\n  &lt;- \n\nOnce you add this, you can type “as” and hit tab (and hit enter if there are other competing shortcuts) to have &lt;- printed.\n\n\n\n\n\n\nFollow  Tools  \\(\\rightarrow\\) Global Options  \\(\\rightarrow\\)  Code  \\(\\rightarrow\\)  Edit Snippets , select R tab, and add snippets.\n\n\n\n\n\nTry yourself\n\n\n\nPlace the following\n\nsnippet as\n  &lt;-\n\ntype “as” and hit tab inside an R code chunk\n\n\n\n\n\n\n\n\nWhat is it?Example\n\n\nSuppose you are working on an Quarto document.\n\nYou are in the R context if your cursor is in an R code chunk\nYou are in the Markdown context if your cursor is outside of an R code chunk\n\nSnippets defined in the R (Markdown) tab only works in the R (Markdown) context.\n\n\nThis snippet will let you create an R code chunk with typing “rmc”. Place it in the Markdown tab of the snippets list and hit shift+tab to invoke it.\nsnippet rmc\n  `r ''````{r }\n  ```\nConfirm that this snippet does not work in the R environment.\n\n\n\n\n\n\nsnippet rmc\n  `r ''````{r ${1:chunk_title}}\n    ${2:chunk_content}\n  ```\n$ is used as a special character to denote where the cursor should jump (by hitting tab) after completing each section of a snippet.\n\n\nggplot (scatter plot)\nsnippet gl\n  ggplot(data = ${1:dataset}) +\n  geom_line(aes(y = ${2:y}, x = ${3:x}))\n\nggplot (density plot)\nsnippet gd\n  ggplot(data = ${1:dataset}) +\n  geom_density(aes(x = ${2:x}))"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#resources",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#resources",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Resources",
    "text": "Resources\n\nEfficient R Programming\ntidyverse style guide\nstyler github page\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science with R for Environmental, Agricultural, and Social Scientists",
    "section": "",
    "text": "This website hosts course materials for Data Science with R for Environmental, Agricultural, and Social Scientists."
  },
  {
    "objectID": "exercises/1-2-data_merging.html",
    "href": "exercises/1-2-data_merging.html",
    "title": "Ex-1-2: Merge Datasets",
    "section": "",
    "text": "Datasets: economics from the ggplot2 package and a fictitious dataset for financial events.\nTask: Merge the economics dataset with a fictitious dataset that provides a financial event for specific dates. Join these datasets using left_join based on date.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nDatasets: chickwts from the datasets package.\nTask: The chickwts dataset contains the weight of chicks alongside feed type. Create a fictitious dataset that provides pricing information for each feed type. Join these datasets based on the feed type.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDatasets: PlantGrowth from the datasets package.\nTask: The PlantGrowth dataset provides information about the weight of plants under different treatment conditions. Create a fictitious dataset that assigns a scientific team responsible for each treatment type. Merge these datasets based on the group column.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-1",
    "href": "exercises/1-2-data_merging.html#exercise-1",
    "title": "Ex-1-2: Merge Datasets",
    "section": "",
    "text": "Datasets: economics from the ggplot2 package and a fictitious dataset for financial events.\nTask: Merge the economics dataset with a fictitious dataset that provides a financial event for specific dates. Join these datasets using left_join based on date.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-2",
    "href": "exercises/1-2-data_merging.html#exercise-2",
    "title": "Ex-1-2: Merge Datasets",
    "section": "",
    "text": "Datasets: chickwts from the datasets package.\nTask: The chickwts dataset contains the weight of chicks alongside feed type. Create a fictitious dataset that provides pricing information for each feed type. Join these datasets based on the feed type.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-3",
    "href": "exercises/1-2-data_merging.html#exercise-3",
    "title": "Ex-1-2: Merge Datasets",
    "section": "",
    "text": "Datasets: PlantGrowth from the datasets package.\nTask: The PlantGrowth dataset provides information about the weight of plants under different treatment conditions. Create a fictitious dataset that assigns a scientific team responsible for each treatment type. Merge these datasets based on the group column.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-1-1",
    "href": "exercises/1-2-data_merging.html#exercise-1-1",
    "title": "Ex-1-2: Merge Datasets",
    "section": "2.1 Exercise 1",
    "text": "2.1 Exercise 1\nDatasets: Two fictitious datasets: one containing student enrollment details and another containing their grades.\nTask: Join the enrollment dataset with the grades dataset using student_id and semester as the key variables.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-2-1",
    "href": "exercises/1-2-data_merging.html#exercise-2-1",
    "title": "Ex-1-2: Merge Datasets",
    "section": "2.2 Exercise 2",
    "text": "2.2 Exercise 2\nDatasets: Two fictitious datasets: one listing employee details and another detailing their project assignments.\nTask: Merge the employees dataset with the projects dataset using both department and role as the key variables.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-3-1",
    "href": "exercises/1-2-data_merging.html#exercise-3-1",
    "title": "Ex-1-2: Merge Datasets",
    "section": "2.3 Exercise 3",
    "text": "2.3 Exercise 3\nDatasets: Two fictitious datasets: one containing transaction records and another with product pricing.\nTask: Join the transactions dataset with the pricing dataset using both transaction_date and product_code as the key variables.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Instruction:\n\nVisit here and download all the files.\nOpen Assignment-1-student.qmd and start working on problems."
  },
  {
    "objectID": "assignments.html#assignment-1",
    "href": "assignments.html#assignment-1",
    "title": "Assignments",
    "section": "",
    "text": "Instruction:\n\nVisit here and download all the files.\nOpen Assignment-1-student.qmd and start working on problems."
  },
  {
    "objectID": "assignments.html#assignment-2",
    "href": "assignments.html#assignment-2",
    "title": "Assignments",
    "section": "Assignment 2",
    "text": "Assignment 2\nInstruction:\n\nVisit here and download all the files.\nOpen Assignment-2-student.qmd and start working on problems."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html",
    "href": "exercises/1-1-data_wrangling_dplyr.html",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the mtcars dataset for cars that have an automatic transmission (am == 1) and weigh more than 3,000 lbs (wt &gt; 3).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nObjective: Filter the iris dataset for flowers of the species setosa where the sepal length (Sepal.Length) exceeds 5 cm.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nObjective: Filter the dataset for diamonds with a cut of “Premium” and a carat size between 1 and 2.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nObjective: Filter the data for days in June (Month == 6) where the ozone level (Ozone) exceeded 100 (ignoring NA values).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nObjective: Filter for records of chicks (Chick) number 1 to 5 (inclusive) and for times (Time) less than or equal to 10 days.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the mtcars dataset for cars that have an automatic transmission (am == 1) and weigh more than 3,000 lbs (wt &gt; 3).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the iris dataset for flowers of the species setosa where the sepal length (Sepal.Length) exceeds 5 cm.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-3",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-3",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the dataset for diamonds with a cut of “Premium” and a carat size between 1 and 2.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-4",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-4",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the data for days in June (Month == 6) where the ozone level (Ozone) exceeded 100 (ignoring NA values).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-5",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-5",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter for records of chicks (Chick) number 1 to 5 (inclusive) and for times (Time) less than or equal to 10 days.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "2.1 Exercise 1",
    "text": "2.1 Exercise 1\nObjective: Add a column named efficiency that calculates miles-per-gallon (mpg) divided by the number of cylinders (cyl).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "2.2 Exercise 2",
    "text": "2.2 Exercise 2\nObjective: Create a new column named area which multiplies sepal length (Sepal.Length) by sepal width (Sepal.Width).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "2.3 Exercise 3",
    "text": "2.3 Exercise 3\nObjective: Calculate the price per carat and name the new column price_per_carat.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-4-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-4-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "2.4 Exercise 4",
    "text": "2.4 Exercise 4\nObjective: Convert the temperature from Fahrenheit (Temp) to Celsius and name the new column TempC. The formula is C = (F - 32) * 5/9.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.1 Exercise 1",
    "text": "3.1 Exercise 1\nObjective: Group by the number of cylinders (cyl) and compute the average miles-per-gallon (mpg) for each group.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.2 Exercise 2",
    "text": "3.2 Exercise 2\nObjective: Group by flower species (Species) and calculate the average sepal length (Sepal.Length) and sepal width (Sepal.Width) for each species.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.3 Exercise 3",
    "text": "3.3 Exercise 3\nObjective: Group by cut and color and compute the median price for each combination.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-4-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-4-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.4 Exercise 4",
    "text": "3.4 Exercise 4\nObjective: Group by month (Month) and compute the maximum temperature (Temp) and average ozone level (Ozone, omitting NA values) for each month.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-5-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-5-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.5 Exercise 5",
    "text": "3.5 Exercise 5\nObjective: Group by diet (Diet) and chick number (Chick). For each combination, compute the final weight (i.e., weight at the maximum time).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-calculate-average-mpg-by-cylinder",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-calculate-average-mpg-by-cylinder",
    "title": "Ex-1-1: Data Wrangling",
    "section": "4.1 Exercise 1: Calculate Average MPG by Cylinder",
    "text": "4.1 Exercise 1: Calculate Average MPG by Cylinder\nTask: Filter the dataset to cars with more than 100 horsepower. Then, for these cars, calculate the average miles per gallon (mpg) for each number of cylinders (cyl).\nFunctions to use: filter(), mutate(), group_by(), summarize()\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-adjusted-price-calculation",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-adjusted-price-calculation",
    "title": "Ex-1-1: Data Wrangling",
    "section": "4.2 Exercise 2: Adjusted Price Calculation",
    "text": "4.2 Exercise 2: Adjusted Price Calculation\nTask: Filter diamonds that are “Ideal” in cut and have carat less than 1. Calculate an adjusted price which is 90% of the original price. Finally, calculate the average adjusted price for each clarity level.\nFunctions to use: filter(), mutate(), group_by(), summarize()\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-compute-average-dispersion-by-gear",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-compute-average-dispersion-by-gear",
    "title": "Ex-1-1: Data Wrangling",
    "section": "4.3 Exercise 3: Compute Average Dispersion by Gear",
    "text": "4.3 Exercise 3: Compute Average Dispersion by Gear\nTask: Filter cars with 4 or 6 cylinders. Create a new column named disp_per_cyl that calculates the dispersion (disp) per cylinder (cyl). Then compute the average disp_per_cyl for each gear (gear) level.\nFunctions to use: filter(), mutate(), group_by(), summarize()\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/index.html",
    "href": "exercises/index.html",
    "title": "Exercises",
    "section": "",
    "text": "Title\n\n\n\n\n\n\nEx-1-1: Data Wrangling\n\n\n\n\nEx-1-2: Merge Datasets\n\n\n\n\nEx-1-3: Reshape Datasets\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#github",
    "href": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#github",
    "title": "02-0: Clone Github Repositories",
    "section": "Github",
    "text": "Github\n\nGithub is an online service to store primarily computer programs (small datasets are okay to store).\nGithub repository is like a folder on your computer (but it is online)\n\npublic: anybody can access it\nprivate: only the owner can access it (you cannot even see it on Github)\n\nThere are numerous public repositories that serve as excellent examples to learn coding\nYou can clone (just another way of saying copy) any public Github repositories to your local computer\n\n\n\n\n\nObjective\n\n\nLearn how to clone Github repositories."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#sublime-merge",
    "href": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#sublime-merge",
    "title": "02-0: Clone Github Repositories",
    "section": "Sublime Merge",
    "text": "Sublime Merge\n\nIn cloning Github repositories, we will use Sublime Merge.\nSublime Merge is certainly not the only option. But, I found it very easy and light-weight to use especially for just cloning Github repositories.\n\n\n\n\n\nInstall Sublime Merge\n\n\nClick here and install it."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#clone-a-repository-to-your-computer",
    "href": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#clone-a-repository-to-your-computer",
    "title": "02-0: Clone Github Repositories",
    "section": "Clone a repository to your computer",
    "text": "Clone a repository to your computer\n\nCopy the url of the repositoryClone the repositoryDo it yourself\n\n\n\nVisit the Github repository you want to clone (copy)\nClick on the Code button\nClick on the a button with two sheets of papers, which will copy the url of the repository\n\n\n\n\n\nStep 1Step 2\n\n\nGo to Sublime Merge and follow file -&gt; Clone Repository\n\n\n\nYou should now see something like below.\n\n\nNote that the source url you copied is already printed on the Source URL box (if not, just paste the url yourself).\nOn Repository Name, the name of the repository for which you copied the url is printed automatically. If you would like a different name, type the name you want.\nOn Destination Path, click on the gray box with ... to select the folder on your machine in which the repository is going to be cloned.\nFinally, hit the Clone button\n\n\n\n\n\n\n\n\nLet’s clone a repository that has many templates and sample qmd files used in this course.\nWe will actually use this template later, so do not delete it after you clone it.\nThe repository is found here.\n\n\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "Lecture Slides",
    "section": "",
    "text": "Title\n\n\nTopic\n\n\n\n\n\n\n01-1: Introduction to R\n\n\nChapter 1: R Introduction\n\n\n\n\n02-0: Clone Github Repositories\n\n\nChapter 2: Github\n\n\n\n\n02-1: Introduction to Quarto\n\n\nChapter 2: Quarto\n\n\n\n\n03-1: Importing Files and Exporting to Files\n\n\nChapter 3: Data Wrangling\n\n\n\n\n03-2: Data wrangling with tidyverse: The Basics\n\n\nChapter 3: Data Wrangling\n\n\n\n\n03-3: Reshaping and Merging\n\n\nChapter 3: Data Wrangling\n\n\n\n\n04-1: Data Visualization with ggplot2: Basics\n\n\nChapter 4: Data Visulization\n\n\n\n\n04-2: Data visualization with ggplot2: More in One\n\n\nChapter 4: Data Visualization\n\n\n\n\n04-3: Data visualization with ggplot2: Fine Tuning\n\n\nChapter 4: Data Visualization\n\n\n\n\n05-1: User-defined Function, Loop, and Parallelization\n\n\nChapter 5: Function and Loop\n\n\n\n\n06-1: How to write R codes, manage Projects, work with RStudio\n\n\nChapter 6: Reproducibility\n\n\n\n\n07-1: Miscellaneous Useful Functions and Tips\n\n\nChapter 7: Date and String\n\n\n\n\n08-1: Making Tables with flextable\n\n\nChapter 8: Make Tables\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "syllabus/syllabus_24.html",
    "href": "syllabus/syllabus_24.html",
    "title": "Instructor:",
    "section": "",
    "text": "Instructor:\nTaro Mieno:\n\nEmail: tmieno2@unl.edu\nOffice: 209 Filley Hall\n\n\n\nSchedule\n\nLectures: MW 8:50 - 10:20 AM\nOffice Hours: by appointment\n\n\n\nCourse Description:\nThe goal of this course is to prepare students for jobs that require quantitative skills beyond Microsoft Excel and graduate programs. The R software is used throughout the course. In order to achieve the goal, students will be introduced to the basics of programming and how to apply it to real world issues in the field of agricultural (agricultural economics, agronomy, etc) and environmental sciences. By completing the course, students will know data wrangling (e.g., merging, transforming datasets), data visualization, and exploratory data analysis, spatial data management.\n\n\nReading Materials\n\nRecommended:\n\nGrolemund, Garrett. and Wickham, Hadley. 2019 \nLovelace, Robin., Nowosad, Jakub., and Muenchow, Jannes. 2019 \n\nPrerequisites:\n\nIntroductory statistics (STAT 218) or equivalent\n\n\n\n\nGrading\n\n\ntitlescoreAssignments (2 assignments)60%Final Paper40%Total100%\n\n\n\nAssignments: There will be 2 assignments. Late submissions will have 1/3 of a letter grade deducted from the grade for that submission, increasing by an additional 1/3 grade for each 24 hours beyond the deadline.\nFinal Paper: In this assignment, you write a short paper with a particular emphasis on programming using real-world data sets. You must identify a topic that would involve collecting datasets from multiple different data sources. The topic has to be approved by me to avoid a final project without significant programming tasks by . The proposal of your final project detailing what datasets to use, where you collect them, and how you use them have to be submitted by .\n\n\n\nImportant Deadlines:\n\nFinal project topic approved by the instructor: October 30\nFinal project proposal: November 13\nFinal project submission: December 20\n\n\n\nTopics Covered\n\nIntroduction to R\nQuarto\nData Wrangling\nMerge and reshape datasets\nData visualization\nMiscellaneous data manipulations\nHow to write and organize codes\nResearch flow illustration\nWriting your own function\nLooping\nParallel computing\nCreate tables"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#preparation",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#preparation",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Preparation",
    "text": "Preparation\n\nggplot2 packageDataset\n\n\nInstall the package if you have not.\n\ninstall.packages(\"ggplot2\")\n\n\nOr, when you load the tidyverse package, it automatically loads it.\n\n#--- load ggplot2 along with others in the tidyverse package ---#\nlibrary(tidyverse)\n\n#--- or ---#\nlibrary(ggplot2)\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDataVariable DefinitionsDerived data\n\n\nWe use county_yield, which records corn and soybean yield data by county over multiple years.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nsoy_yield: soybean yield (bu/acre)\ncorn_yield: corn yield (bu/acre)\nd0_5_9: ratio of weeks under drought severity of 0 from May to September\nd1_5_9: ~ drought severity of 1 from May to September\n\nd2_5_9: ~ drought severity of 2 from May to September\n\nd3_5_9: ~ drought severity of 3 from May to September\n\nd4_5_9: ~ drought severity of 4 from May to September\n\n\n\nWe also use the derivative of county_yield, which records average corn yield by year.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#ggplot2-basics-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#ggplot2-basics-1",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "ggplot2 basics",
    "text": "ggplot2 basics\n\nStep 1Step 2aes()Summary\n\n\nThe very first job you need to do in creating a figure using the ggplot2 package is to let R know the dataset you are trying to visualize, which can be done using ggplot() like below:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhen you create a figure using the ggplot2 package, ggplot() is always the function you call first.\nLet’s now see what is inside g_fig:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWell, it’s blank. Obviously, g_fig still does not have enough information to create any kind of figures. You have not told R anything specific about how you would like to use the information in the dataset.\n\n\nThe next thing you need to do is tell g_fig what type of figure you want by geom_*() functions. For example, we use geom_point() to create a scatter plot. To create a scatter plot, R needs to know which variables should be on the y-axis and x-axis. These information can be passed to g_fig by the following code:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere,\n\ngeom_point() was added to g_fig to declare that you want a scatter plot\naes(x = d3_5_9, y = corn_yield) inside geom_point() tells R that you want to create a scatter plot where you have d3_5_9 on the x-axis and corn_yield on the y-axis\n\nThis is what g_fig_scatter looks:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nWhat does it do?If not in aes()?\n\n\nGoing back to the code,\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNote that x = d3_5_9, y = corn_yield are inside aes().\n\n\n\n\nImportant\n\n\naes() is used to make the aesthetic of the figure to be a function of variables in the dataset that you told ggplot to use (here, county_yield).\n\n\n\n\naes(x = d3_5_9, y = corn_yield) is telling ggplot to use d3_5_9 and corn_yield variables in the county_yield dataset for the x-axis and y-axis, respectively.\n\n\nIf you do not have x = d3_5_9, y = corn_yield inside aes(), R is going to look for d3_5_9 and corn_yield themselves (but not in county_yield), which you have not defined.\nTry:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nggplot(data = dataset) to initiate the process of creating a figure\nadd geom_*() to declare what kind of figure you would like to make\nspecify what variables in the dataset to use and how they are used inside aes()\nplace the aes() you defined above in the geom_*() you specified above"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#different-types-of-figures-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#different-types-of-figures-1",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Different types of figures",
    "text": "Different types of figures\n\nFigure typesHistogramDensity PlotLine plotBoxplotBar plot\n\n\n\nggplot2 lets you create lots of different kinds of figures via various geom_*() functions.\n\ngeom_histogram()/geom_density()\ngeom_line()\ngeom_boxplot()\ngeom_bar()\n\nHow to specify aesthetics vary by geom_*().\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\ngeom_histogram() only needs x.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\ngeom_density() only needs x.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\ngeom_line() needs x and y.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\ngeom_boxplot() needs x and y.\nWhy factor(year)?\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\ngeom_bar() needs x and y"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#modifying-how-figures-look",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#modifying-how-figures-look",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Modifying how figures look",
    "text": "Modifying how figures look\n\nIntroductionscatter plothistogramboxplotline plot\n\n\nAll the elements in the figures we have created so far are in black and white.\nYou can change how figure elements look by providing options inside geom_*().\nHere are the list of options to control the aesthetics of figures:\n\nfill\ncolor\nsize\nshape\nlinetype\n\nElements of figures that you can modify differ by geom types\nThe same element name can mean different things based on geom types\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#exercises",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#exercises",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Exercises",
    "text": "Exercises\n\nInstructionExercise 1Exercise 2\n\n\nThis exercise use the diamonds dataset from the ggplot2() package. First, load the dataset and extract observations with Premium cut whose color is one of E, I, and F:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing carat and price variables from premium, generate the figure below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_point(aes(x = carat, y = price), color = \"red\")\n\n\n\n\n\n\n\nUsing price variables from premium, generate a histogram of price shown below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_histogram(aes(x = price), fill = \"white\", color = \"blue\")"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#other-supplementary-geom_s-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#other-supplementary-geom_s-1",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Other supplementary geom_*()s",
    "text": "Other supplementary geom_*()s\n\ngeom_*()vline and hlineablinesmoothribbontextannotate\n\n\nHere are the list of useful geom_.\n\ngeom_vline(): draw a vertical line\ngeom_hline(): draw a horizontal line\ngeom_abline(): draw a line with the specified intercept and slope\ngeom_smooth(): draw an OLS-estimated regression line (other regression methods available)\ngeom_ribbon(): create a shaded area\ngeom_text() and annotate(): add texts in the figure\n\nWe will use g_fig_scatter to illustrate how these functions work.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nxintercept in geom_vline: where the vertical line is placed\nyintercept in geom_hline: where the horizontal line is placed\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\\[y = a + b\\times x\\]\n\nintercept: \\(a\\)\nslope: \\(b\\)\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nAlso try adding method = \"lm\".\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nymin: lower bound of the ribbon\nymax: upper bound of the ribbon\n\nIt is useful when drawing confidence intervals.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nx, y: position of where texts are placed\nlabel: variable to print\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nx: where on x-axis\ny: where on y-axis\nlabel: text to print (break the line)\nsize: font size\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#quarto-introduction",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#quarto-introduction",
    "title": "02-1: Introduction to Quarto",
    "section": "Quarto: Introduction",
    "text": "Quarto: Introduction\n\nWhat is and why Quarto?Using WORD?Make a report with Quarto\n\n\n\nIt allows you to effortlessly generate documents that can print both R codes and their outcomes (this lecture note is indeed written using Quarto) in a single document.\nIt is useful when you report the analysis you conducted and its source R codes to your advisor or anyone you report to (as long as that person understands R).\nThe power of Quarto goes well beyond just creating a simple html document. The full power of Quarto is on display here.\n\n\n\n\n\nQuarto Installation\n\n\nVisit here.\n\n\n\n\n\n\n\nIt would be a real pain to do so because you need to copy and paste all the R codes you run and the results onto WORD manually.\nOften times, copied R codes and results are very much likely to be badly formatted when pasting them\nQuarto obviates the need of repeating copying and pasting when you would like to communicate what you did (R codes) and what you found (results) without worrying too much about formatting.\n\n\n\nGenerating a report using Quarto is a two-step process:\n\nCreate an Quarto file (file with .qmd as an extension) with regular texts and R codes mixed inside it.\n\nYou use a special syntax to let the computer know which parts of the file are simple texts and which parts are R codes.\n\nTell the computer to process the qmd file (a click of a button on RStudio, or use the render() function)\n\nThe computer runs the R codes and get their outcomes\nCombine the text parts, R codes, and their results to produce a document"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#quarto-the-basics",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#quarto-the-basics",
    "title": "02-1: Introduction to Quarto",
    "section": "Quarto: the Basics",
    "text": "Quarto: the Basics\n\nR code chunksRenderqmd v.s. outputInline codeMarkdown basicsCaveat\n\n\nA qmd file would consist of two types of inputs:\n\nR code chunks\nRegular texts\n\n\n\n\n\nSpecial Syntax\n\n\nWe can indicate R codes chunks by placing R codes inside a special syntax.\n```{r}\ncodes\n```\n\n\n\n\n\n\n\n\nDirection\n\n\nTake a look at sample_qmd.qmd, which can be downloaded from here.\n\nR codes summary(cars) and plot(pressure) are enclosed individually by the special syntax\nSo, in this qmd file, R knows that it should treat them as R codes, but not regular texts.\nOn the other hand, any texts that are not enclosed by the special syntax would be recognized as regular text.\n\n\n\n\n\n\n\nThe process of compiling an qmd file to produce a document is called rendering.\n\nThe easiest way to render is to hit the Render button located at the top of the code pane (upper left pane by default)\n\n\n\n\nNote\n\n\nAlternatively, you can use the render() function to render like below:\n\nrender(\"sample_qmd.qmd\")\n\n\n\n\n\n\nInspect the qmd file and its output document:\n\n\nqmd side\n\nlines 1-10: a YAML header where you control the aesthetics of the output document (more on this later)\nline 16: texts not enclosed by the special syntax\nlines 18-21: summary(cars) is an R code, which is enclosed by the special syntax\n\n\nhtml side\n\nlines 1-10: nothing\nline 16: printed as regular texts\nlines 18-21: the R code and its results printed\n\n\n\n\n\n\nYou can refer to an R object previously defined in line and display its content in line:\n\n\n\n\nDirection\n\n\nSee lines 41-51 of the qmd file\n\n\n\n\n\n\n\nheader\nmake a list\nfont\ncode highlighting\ninline math\nmath\nweb link\ncitation\n\n\n\n\n\nDirection\n\n\nCompare the chapter called “Markdown basics” of the qmd file and its corresponding output in the rendered html file\n\n\n\n\n\n\n\nWhen you render an qmd file and create a report, R creates an R session/environment that is completely  independent  of whatever R sessions or environments you may have on your RStudio.\nThis means that when you render an qmd file, you cannot refer to R objects you have defined on your current R session."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#chunk-options",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#chunk-options",
    "title": "02-1: Introduction to Quarto",
    "section": "Chunk options",
    "text": "Chunk options\n\nWhat?Example: echoHowVarious optionsSpecify chunk options globally\n\n\nChunk options are special codes inside R code chunks to control how the code chunks operate.\nHere are some example options:\n\necho\neval\nmessage\nwarning\noutput\ninclude\ncache\nfig.cap, fig-height, etc\n\nSee all the options here.\n\n\n\nInspect the qmd file and its output document and observe that\n\nFrom the R code chunk with summary(cars), the code itself and its outcome are presented in the output\nFrom the R code chunk with plot(pressure), only its outcome is presented in the output\n\nThis is because of the chunk option echo: false in the second R code chunk\n\n\n\nTo set a chunk option, use the following syntax:\n```{r}\n#| option-name: choice\n\nR codes come here\n```\n\nExample\n```{r}\n#| echo: false\n\nR codes come here\n```\n\n\n\n\n\nImportant\n\n\nNo space between the initiation of an R code chunk and chunk option. For example, the echo chunk option is going to be ignored below:\n```{r}\n\n#| echo: false\n\nR codes come here\n```\n\n\n\n\n\n\n\necho and evalmessage and warningoutputincludefigure-related\n\n\n\n\necho ( true  or false): specify whether the R codes appear in the output document or not\neval ( true  or false): specify whether the R codes are evaluated or not\n\n\n\n\n\n\nDirection\n\n\nInspect the qmd file (lines 75-103) and its output document to see their effects.\n\n\n\n\n\n\n\n\nmessage (true or  false ): specify weather messages associated with R codes evaluation appear in the output document or not\nwarning (true or  false ): specify weather warnings associated with R codes evaluation appear in the output document or not\n\n\n\n\n\n\nDirection\n\n\nInspect the qmd file (lines 107-131) and its output document\n\n\n\n\n\n\n\noutput ( true , false, asis)\n\ntrue: pint all the results including warnings and messages\nfalse: hides all the results including warnings and messages\nasis: the outputs of the R codes are printed as-is without any suitable formatting\n\n\n\n\n\n\nDirection\n\n\nInspect the qmd file (lines 135-149) and its output document\n\n\n\n\n\n\n\ninclude: false is equivalent to having eval: true, echo: false, and results: false\n\n\n\n\n\nDirection\n\n\nInspect the qmd file (lines 153-166) and its output document\n\n\n\n\n\n\n\nChunk option for figure\n\nfig.align: ‘default’, ‘center’, ‘left’, ‘right’\nfig.width: in inches\nfig.height: in inches\nfig.cap: figure caption\n\n\n\n\n\n\nDirection\n\n\nPlay with these options. See here for more chunk options.\n\n\n\n\n\n\n\n\n\n\n\nWhat and why?HowNote\n\n\nSometimes, it is useful to set chunk options that apply globally (for the entire documents).\nFor example,\n\nYou are writing a term paper and the instructor may want to see only results, but not R codes.\nYou do not want any of the R codes to appear on the output document, but echo: true is the default.\nIt is a waste of time to type echo: false for all the R code chunks\n\n\n\nYou can set chunk options globally in the YAML header with the execute option like below:\n---\ntitle: \"Reporting using Quarto\"\nauthor: \"Taro Mieno\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    number-depth: 2\nexecute:\n  echo: false\n---\n\n\n\n\nDirection\n\n\n\nInsert the following in the YAML header of sample_qmd.qmd file so that it looks like above\n\nexecute:\n  echo: false\n\nRender the qmd file again and then compare lines 35-39 of the qmd file and its corresponding output.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nLocal option always overrides the global option."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#caching",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#caching",
    "title": "02-1: Introduction to Quarto",
    "section": "Caching",
    "text": "Caching\n\nWhat?Let’s tryChanges in codesChanges in contentsdependson\n\n\n\nIn the course of creating a document using Quarto, You are going to hit the “Render” button numerous times when you are writing a report to check whether the final output looks fine.\nEvery time you render, all the R code chunks are evaluated, which is inefficient because R has evaluated those R code chunks before.\nSo, if we can somehow store the results of R code chunks (caching), and then let R call up the saved results instead of re-evaluating the codes all over again, we can save lots of time.\nThe benefit of doing so is greater when the processing time of the codes is longer. Caching can be done by adding cache==TRUE as a chunk option.\nBy adding the option, once an R chunk is processed, its results are saved and can be reused again by R later when you compile the document again.\n\n\n\n\n\n\n\nDirection\n\n\n\nChange eval: false to eval: true in the cache_1 chunk\nRender and confirm that sample_qmd_cache and sample_qmd_files folders are created\nRender again and observe that the rendering process is much faster now\n\n\n\n\n\n\n\nWhen any part of the R codes within a cached R code chunk is changed, R is smart enough to recognize the change and evaluate the R code chunk again without using the cached results for the chunk.\n\n\n\n\nDirection\n\n\nChange y = 1 + x + v to y = 1 + 2 * x +v in the cache_1 chunk and render\n\n\n\n\n\n\n\nSometimes, your R codes within an cached R code chunk have not changed, but the content of a dataset used in the R code chunk may have changed.\nIn such a case, R is unable to recognize the change in the  content  of the dataset.\n\n\n\n\n\n\nDirection\n\n\n\nChange eval: false to eval: true in the cache_2 chunk and render\nChange y = 1 + 2 * x + v back to y = 1 + x +v and render (notice that the printed number from cache_2 did not change)\n\n\n\n\n\n\n\n\nTo R, everything in the cache_2 chunk looks the same as they only look at the code texts, but not the contents of R objects.\nTherefore, R would call up the saved results instead of rerunning the R codes, which is not what you want.\nYou can use the dependson option to make R recognize any changes in cached R objects\n\n\n\n\n\nDirection\n\n\nAdd dependson: cache_1 to the cache_2 chunk as an option and render again."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#directory",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#directory",
    "title": "02-1: Introduction to Quarto",
    "section": "Directory",
    "text": "Directory\n\nReading FilesWhat to do?\n\n\nSuppose you are interested in reading a dataset file like this:\n\nread.csv(\"corn_price.csv\")\n\n\n\n\n\nImportant\n\n\nBy default, R looks for corn_price.csv in the same folder in which the qmd file is located.\n\n\n\n\n\nIn my case, the sample_qmd.qmd is located in  /Users/tmieno2/Dropbox/TeachingUNL/Kobe-Data-Science/Chapter-2-Quarto .\nThis means that RStudio tries to find  /Users/tmieno2/Dropbox/TeachingUNL/Kobe-Data-Science/Chapter-2-Quarto/corn_price.csv.\nIf the file is not in the directory, RStudio won’t be able to find the file to import and returns an error. Clearly, all the subsequent actions dependent on the dataset will not run.\n\n\n\nTo avoid errors in reading files, there are three options:\n\nOption 1 (recommended for a beginner)\nPut all the datasets you intend to use in the same directory in which your qmd file is located.\n\nOption 2\nIf the file is not in the directory, supply the full path to the file like this\n\nread.csv(\"~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Chapter-2-Quarto/corn_price.csv\")\n\n\nOption 3\nTell R to look for a specific directory for datasets by setting a working directory using opts_knit$set(root.dir = directory) at the beginning by adding the code like below in your qmd file after the YAML header:\n```{r}\nknir::opts_knit$set(root.dir = \"~/Dropbox/TeachingUNL/Data-Science-with-R/Chapter-2-Quarto\")\n```"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#output-types",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#output-types",
    "title": "02-1: Introduction to Quarto",
    "section": "Output types",
    "text": "Output types\n\nVarious formatsHowNote\n\n\nYou can render an qmd file to various formats using various engines (visit here to see all the document types).\n\n\n\n\nImportant\n\n\n\nIn this course, we only use the html option. Submit your assignment in html.\nhtml is void of the concept of page. Consequently, you do not have to worry about how you should organize texts, tables, and figures within a page (fixed amount of space).\n\n\n\n\n\n\nStep 1\nTo write to an output type you want, first add an appropriate options under the format option to the YAML header like below.\ntitle: \"Reporting using Quarto\"\nauthor: \"Taro Mieno\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    number-depth: 2\n  docx: default \n  typst:  \n    papersize: a5\n    margin:\n      x: 1cm\n      y: 1cm\n    columns: 2\nHere,\n\nWORD (with word option) is generated with the default options.\nPDF (with typst option) is generated with the options specified below typst:.\n\n\n\n\n\nDirection\n\n\nAdd the docx option and typst options in the YAML above to your qmd file.\n\n\n\n\n\nStep 2\nYou should see a downward triangle right to the “Render” button. Pick one format to render to a document of the format.\n\n\nYAML and chunk options available are different based on the output format and engine. Visit here to see the options specific to particular formats."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#resources",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#resources",
    "title": "02-1: Introduction to Quarto",
    "section": "Resources",
    "text": "Resources\nThe best resource to learn Quarto is its official website:\n\nGeneral and specific (to document type) syntax\nYAML options specific to document type\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#long-and-wide-formats",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#long-and-wide-formats",
    "title": "03-3: Reshaping and Merging",
    "section": "Long and wide formats",
    "text": "Long and wide formats\n\nlong vs widewide or long?too long\n\n\n\n\nLong format\nA single column representing a single variable\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWide format\nMultiple column representing a single variable\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote: there is nothing in the dataset that tells you what the data values represent in the wide format.\n\n\n\n\n\nSuppose you are interested in estimating the following statistical model:\n\\[corn yield = \\beta_0 + \\beta_1 R_{May}  + \\beta_2 R_{June} + \\beta_2 R_{July} + \\beta_2 R_{August} + \\beta_2 R_{September} + v\\]\nwhere \\(R\\) refers to rainfall.\nThen the following dataset is in a  long  format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is  too long  for your analysis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPoint\n\n\nWhether a dataset is wide or long is determined based on what you are doing with the dataset."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#long-to-wide",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#long-to-wide",
    "title": "03-3: Reshaping and Merging",
    "section": "Long to wide",
    "text": "Long to wide\n\npreparehow and exampleprefixmultiple columns\n\n\nCreate the following dataset in long format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nHow\nTo convert a long-formatted data.frame into a wide-formatted data.frame, you can use tidyr::pivot_wider() function from the tidyr package.\n\n#--- NOT RUN ---#\ntidyr::pivot_wider(\n  data,\n  names_from = variable 1,\n  values_from = variable 2\n)\n\n\nthe value of variable 1 becomes the name the new variables\nthe value of variable 2 becomes the value of the new variables\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nthe value of year becomes the name the new variables\nthe value of yield becomes the value of the new variables\n\n\n\n\n\n\nYou can append a character string to the new variable names. The previous example had 2019 and 2010 as the name of the new variables.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPrepare a datasetdemonstration\n\n\nCreate the following data in long format;\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can simply supply multiple variables to be made wide like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#wide-to-long",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#wide-to-long",
    "title": "03-3: Reshaping and Merging",
    "section": "Wide to long",
    "text": "Wide to long\n\nhow and exampleprefixmultiple sets of columns\n\n\n\n\nHow\nTo convert a long-formatted data.frame into a wide-formatted data.frame, you can use tidyr::pivot_longer() function from the tidyr package.\n\n#--- NOT RUN ---#\ntidyr::pivot_longer(\n  data, \n  cols = x,\n  names_to = y, \n  values_to = z \n)\n\n\nx: list of the name of the columns to pivot into longer format\ny: what the name of x represents\nz: what the values stored in x represents\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nx: all the variables except state\ny: “year”\nz: “yield”\n\n\n\n\n\n\nYou do not want year_ in front of the year numbers in the new year variable? You can use the names_prefix option as follows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice year is character. Convert it to numeric using as.numeric() if you use is as a numeric variable.\n\n\n\nPrepone-step?separate()three-step\n\n\n\n\nLong\nCreate the following dataset in the long format;\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWide\nConvert the long dataset into the wide format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n.red[Objective]: We would like to convert the wide data back to the original long data.\n\n\n\n\n\nYou cannot revert this data back to the original long-formatted data in one step.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHowever, you take advantage of dplyr::separate() function, which separate a variable of type character by a user-specified separator into two variables in the dataset.\n\n#--- NOT RUN ---#\nseparate(data, variable name, the name of variables, separator)\n\n\n\nBefore separation:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAfter separation:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nAfter separating type_year to type and year, all you have to do is to apply tidyr::pivot_wider() to have the desired long-formatted data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#exercises",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#exercises",
    "title": "03-3: Reshaping and Merging",
    "section": "Exercises",
    "text": "Exercises\n\nDataExercise 1Exercise 2Exercise 3\n\n\nWe will use flights data from the nycflights13 package.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing flights data, calculate the total number of flights by carrier-month, which is in the long format. Name the resulting object num_flights.\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nnum_flights &lt;-\n  flights %&gt;% \n  group_by(carrier, month) %&gt;% \n  summarize(num_obs = n()) \n\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nReshape the num_flights data into a wide format with the number of flights per month as columns, and assign the result to an R object named num_flights_wide.\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nnum_flights %&gt;% \n  tidyr::pivot_wider(\n    names_from = month,\n    names_prefix = \"month_\",\n    values_from = num_obs\n  ) \n\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nReshape the data (num_flights_wide) back into the long format so that a single columns has all the flight number values\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nnum_flights_wide %&gt;% \n  tidyr::pivot_longer(\n    starts_with(\"month_\"),\n    names_to = \"month\",\n    names_prefix = \"month_\",\n    values_to = \"num_flights\"\n  )\n\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#merging-multiple-datasets-1",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#merging-multiple-datasets-1",
    "title": "03-3: Reshaping and Merging",
    "section": "Merging multiple datasets",
    "text": "Merging multiple datasets\n\nMotivationMatch? 1Match? 2Match? 3How\n\n\nIt is very common that you have data stored in separate files, and you need to combine them before you conduct any statistical analysis.\nFor example, if you are interested in how crop price affects the supply of crops, you want to have price and production data in a single dataset. However, it may be that price and production data are stored in two separate files.\n\n\nNow suppose, you have collected price and production data for Lancaster and Douglas County from 2015 to 2016.\nHere is what the datasets look like (these are made-up numbers).\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nQuestion\n\n\nCan you merge the two?\n\n\n\n\n\n\nLet’s display one more variable from each of the datasets.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nOkay, great. At least we know which price and prod belong to which county! In other words, we know which price and prod belong to who (or where).\n\n\n\n\n\nQuestion\n\n\nCan you merge the two?\n\n\n\n\n\n\nLet’s display one more variable from each of the datasets.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nQuestion\n\n\nCan you merge the two now?\n\n\n\n\n\n\n\n\n\nKey\n\n\n\nThe variables that let you merge two datasets are called  keys.\nWhat are the keys here?\n\n\n\n\n\n\n\n\nYou can use the left_join() function from the dplyr package to merge two datasets.\nThere are different types of join functions:\n\nright_join() (you never need to use this one)\ninner_join()\nfull_join()\nsemi_join()\nnest_join()\n\nBut, most of the time, left_join() is sufficient.\nTry to learn other functions when you encounter a case where left_join() is not sufficient. Do not waster your time until then."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#joining-datasets-with-dplyrleft_join",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#joining-datasets-with-dplyrleft_join",
    "title": "03-3: Reshaping and Merging",
    "section": "Joining datasets with dplyr::left_join()",
    "text": "Joining datasets with dplyr::left_join()\n\nleft_join()demonstration: 1 to 1demonstration: 1 to mExercises\n\n\nSyntax\n\n#--- Syntax (NOT RUN) ---#\nleft_join(data_x, data_y, by = keys)  \n\n\nRules to be aware of\n\n.blue[Rule 1]: It returns all rows from data_x, and all columns from data_x and data_y\n.blue[Rule 2]: Rows in data_x with no match in data_y will have NA values in the new columns\n.blue[Rule 3]: If there are multiple matches between data_x and data_y, all combinations of the matches are returned\n\n\n\n\n\nNote\n\n\nThe order of datasets matter.\n\n\n\n\n\n\n\nData prepDemo 1Data prep 2Demo 2keeping all rows\n\n\nWe use price_data and yield_data for demonstrations.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nQuestion\n\n\nWhat are the keys?\n\n\n\n\n\n\nThe keys are county and year, so\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSwitching the two?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nIn this instance, .red[which comes first does not matter] because all the individual rows in yield_data (left data) have exactly one match in price_data (right data) without fail, and vice versa.\n\n\n\n\n\nLet’s expand the yield_data as follows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nyield_data_with_chase on the right:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nyield_data_with_chase on the left:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nRemember?\n\n\n\nRule 1: left_join() returns all rows from data_x, and all columns from data_x and data_y\nRule 2: Rows in data_x with no match in data_y will have NA values in the new columns\n\n\n\n\n\n\n\nWe saw in the previous slide having price_data (as data_x) and yield_data_with_chase as (data_y), left_join() discarded rows in yield_data_with_chase (data_y).\nIf you would like to keep unmatched rows in data_y, you can use full_join().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nData prepDemo\n\n\nLet’s create a weather dataset where you have more than one observations per county-year:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nRemember?\n\n\nRule 3: If there are multiple matches between data_x and data_y, all combinations of the matches are returned.\n\n\n\n\n\n\n\n\n\n\n\nPreparationExercise 1Exercise 2\n\n\nCreate the following datasets and take a look at them to understand what’s in them:\n\nFlights in January:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ndaily temperature in January:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nhourly temperature in January:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYou are interested in learning the impact of daily temperature on departure delay for the flights in January. To do so, you need to have the variables in a single dataset.\nIs this going to be a 1-to-1 matching or 1-to-m matching?\nMerge daily_temp_Jan to flights_Jan using left_join()\n\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nleft_join(flights_Jan, daily_temp_Jan, by = c(\"origin\", \"month\", \"day\"))\n\n\n\n\n\nYou are interested in learning the impact of hourly temperature on departure delay for the flights in January. To do so, you need to have them in a single dataset.\nIs this going to be a 1-to-1 matching or 1-to-m matching?\nMerge hourly_temp_Jan to flights_Jan using left_join()\n\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nleft_join(flights_Jan, hourly_temp_Jan, by = c(\"origin\", \"month\", \"day\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#importing-and-exporting-datasets-1",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#importing-and-exporting-datasets-1",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Importing and Exporting Datasets",
    "text": "Importing and Exporting Datasets\n\nObjectives and DirectionsDirectionsHow\n\n\n\nRead datasets in various formats (csv, xlsx, dta, and rds) containing corn yields in Nebraska counties for the year of 2008.\nWrite R objects as files in various formats\n\n\n\n\nGo here and clone the repository that hosts datasets used in this lecture\nInstall the tidyverse and haven packages, which we will use later to read/write files.\n\n\ninstall.packages(c(\"tidyverse\", \"haven\"))\n\n\n\n\nNote\n\n\nThe tidyverse package does far more than just reading and writing files. We will learn it extensively later.\n\n\n\n\n\nCheck the format in which the dataset is stored by looking at the extension of the file (what comes after the file name and a dot)\n\ncorn.csv: a file format Microsoft Excel supports.\ncorn.xlsx: another format supported by Microsoft Excel, which may have more than one tabs of data sheets.\ncorn.dta: a format that STATA support (software that is immensely popular for economists).\ncorn.rds: a format that R supports.\n\nWhen you import a dataset, you need to use a particular function that is appropriate for the particular type of format the dataset is in."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-csv-file",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-csv-file",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Read a CSV file",
    "text": "Read a CSV file\n\nread.csv()read_csv()Compare\n\n\nYou can use read.csv() from the base package.\n\nSyntax\n\n#--- NOT RUN ---#  \ndata = read.csv(path to the file to import)\n\n\nExamples\n\ncorn_yields_df &lt;- read.csv(\"~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.csv\")\n\n\n\nYou can use read_csv() from the readr package.\n\nSyntax\n\n#--- NOT RUN ---#  \ndata = readr::read_csv(path to the file to import)\n\n\nExamples\n\ncorn_yields_tbl &lt;- readr::read_csv(\"~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.csv\")\n\n\n\n Direction: evaluate corn_yields_df and corn_yields_tbl to see the differences.\n\nData read using read.csv():\n\nclass(corn_yields_df)\n\n[1] \"data.frame\"\n\n\n\nData read using read_csv():\n\nclass(corn_yields_tbl) \n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\""
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#setting-the-working-directory",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#setting-the-working-directory",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Setting the working directory",
    "text": "Setting the working directory\n\nWhat and whyhownavigationRStudio project\n\n\n\nIn the previous slide, we provided the full path to the csv file to read onto R.\nIf you expect to import and/or export (save) datasets and R objects often from/to a particular directory, it would be nice to tell R to look for files in the directory by default. So, the R code looks more like this:\n\n\ncorn_yield &lt;- read.csv(\"corn_yields.csv\")\n\n\n\nThis will save us from writing out the full path every time we either import or export datasets.\nYou can do so by designating the directory as the working directory.\nOnce the working directory is set, R looks for files in that directory unless told otherwise.\nIt is not just when importing datasets. When you export an R object as a file, R will create a file in the working directory by default.\n\n\n\nYou can use setwd() to designate a directory as the working directory:\n\n#--- Setting a directory (path) in your computer---#\nsetwd(\"/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling\")\n\n\nYou can check the current working directory using the getwd() function:\n\n#--- find the current working directory ---#\ngetwd()\n\n[1] \"/Users/tmieno2/Dropbox/TeachingUNL/Kobe-Data-Science/lectures/Chapter-3-DataWrangling\"\n\n\n\n\nSuppose it is convenient for you to set the working directory somewhere else than the folder where all the datasets are residing.\n\nsetwd(\"~/Dropbox/TeachingUNL/DataScience\")\n\n\nYou can then provide the path to the file relative to the working directory like this:\n\ndata &lt;- read_csv(\"Datasets/Chapter_3_data_wrangling/corn_yields.csv\")\n\n\nThis is equivalent to:\n\ndata &lt;- read_csv(\"~/Dropbox/TeachingUNL/DataScience/Datasets/Chapter_3_data_wrangling/corn_yields.csv\")\n\n\nYou can use .. to move up a folder. For example, if you want to import corn_yields.csv stored in “~/Dropbox/TeachingUNL”, then the following works:\n\ndata &lt;- read_csv(\"../corn_yields.csv\")\n\n\n\nYou can create an R Project using RStudio:\n\nclick on a blue transparent box with a plus sign at the upper left corner of RStudio\nclick on “new directory” (to initiate a new folder) or “existing directory” (to designate an existing folder)\n\n\n\n\n\nLet’s try\n\n\n\nCreate an R project\nWhen you open an R Project folder, then the working directory is set at the project folder. Confirm this:\n\n\ngetwd()"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-sheet-from-an-xlsx-file",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-sheet-from-an-xlsx-file",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Read a sheet from an xls(x) file",
    "text": "Read a sheet from an xls(x) file\n\nInstructionSyntax and ExamplesNote\n\n\n\nYou can use read_excel() from the readxl package to read data sheets from an xls(x) file, which is part of the tidyverse package.\nThe readxl package is installed when you install the tidyverse pacakge.\nHowever, it is not loaded automatically when you load the tidyverse package.\nSo, you need to library the package even if you have loaded the tidyverse package.\n\n\nlibrary(readxl)\n\n\n\nSyntax\n\nread_excel(path to the file, sheet = x)\n\n\nx: sheet number\n\nExamples\nImport a sheet of an xls(x) file using read_excel():\n\ncorn_08 &lt;- read_excel(\"corn_yields.xls\", sheet = 1) # 1st sheet \ncorn_09 &lt;- read_excel(\"corn_yields.xls\", sheet = 2) # 2nd sheet\n\n\n\n\n#--- check the class ---#\nclass(corn_08) \n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nNotice that the data is converted into a tibble (because the readxl package is part of the tidyverse package.)."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-stata-data-file-.dta",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-stata-data-file-.dta",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Read a STATA data file (.dta)",
    "text": "Read a STATA data file (.dta)\n\nSyntax and ExamplesNote\n\n\nUse the read_dta() function from the haven package.\n\n#--- load the package ---#\nlibrary(haven) \n\n\nSyntax\n\n#--- Syntax (NOT RUN) ---#\nhaven::read_dta(file path)\n\n\nExamples\n\n#--- import the data ---#\ncorn_yields &lt;- haven::read_dta(\"corn_yields.dta\")\n\n\n\n\n#--- check the class ---#\nclass(corn_yields) \n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nNotice that the data is converted into a data.frame object, not a tibble."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-an-rds-file",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-an-rds-file",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Read an rds file",
    "text": "Read an rds file\n\nInstructionSyntax and ExamplesNote\n\n\n\nAn rds ( r data set) file is a file type that is supported by R.\nYou can use the readRDS() function to read an rds file.\nNo special packages are necessary.\n\n\n\nSyntax\n\nreadRDS(\"path to the file\") \n\n\nExamples\n\ncorn_yields &lt;- readRDS(\"corn_yields.rds\") \n\n\n\n\nclass(corn_yields)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\nNotice that the imported dataset is already a tibble object. This is because the R object exported as corn_yields.rds was tibble."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#export-an-r-object",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#export-an-r-object",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Export an R object",
    "text": "Export an R object\n\nInstructionSyntax and ExamplesNotes on RDS\n\n\n\nExporting datasets work much the same way as importing them.\nHere is the list of functions that let you export a data.frame or (tibble) in different formats:\n\ncsv: write_csv()\ndta: write_dta()\nrds: saveRDS()\n\n\n\n\nSyntax\n\nexport_function(obeject name, file name)\n\n\nExamples\n\n#--- export as csv ---#\nreadr::write_csv(corn_yields, \"corn_yields_exp_rownames.csv\")\n\n#--- export as dta ---#\nhaven::write_dta(corn_yields, \"corn_yields_exp.dta\")\n\n#--- export as rds ---#\nsaveRDS(corn_yields, \"corn_yields_exp.rds\")\n\n#--- export as xls file ---#\n# just don't do it\n\n\n\n\nObject type preservationFile size\n\n\nYou can export any kind of R objects as an rds file.\n\na_list &lt;- list(a = c(\"R\", \"rocks\"), b = corn_yields)   \n\nsaveRDS(a_list, \"a_list.rds\")\n\nreadRDS(\"a_list.rds\")\n\n$a\n[1] \"R\"     \"rocks\"\n\n$b\n# A tibble: 161 × 9\n    Year State  FIPS County_name State_name Commodity `Data item`      Irrigated\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;                &lt;int&gt;\n 1  2008    31 31019 BUFFALO     NEBRASKA   CORN      CORN, GRAIN - Y…         0\n 2  2008    31 31019 BUFFALO     NEBRASKA   CORN      CORN, GRAIN, IR…         1\n 3  2008    31 31041 CUSTER      NEBRASKA   CORN      CORN, GRAIN - Y…         0\n 4  2008    31 31041 CUSTER      NEBRASKA   CORN      CORN, GRAIN, IR…         1\n 5  2008    31 31047 DAWSON      NEBRASKA   CORN      CORN, GRAIN - Y…         0\n 6  2008    31 31047 DAWSON      NEBRASKA   CORN      CORN, GRAIN, IR…         1\n 7  2008    31 31077 GREELEY     NEBRASKA   CORN      CORN, GRAIN - Y…         0\n 8  2008    31 31077 GREELEY     NEBRASKA   CORN      CORN, GRAIN, IR…         1\n 9  2008    31 31079 HALL        NEBRASKA   CORN      CORN, GRAIN - Y…         0\n10  2008    31 31079 HALL        NEBRASKA   CORN      CORN, GRAIN, IR…         1\n# ℹ 151 more rows\n# ℹ 1 more variable: Yield &lt;int&gt;\n\n\nAs you can see a list is saved as an rds file, and when imported, it is still a list.\n\n\nCheck the size of the corn data files in different formats.\nWhich one is the smallest?\n\n\n\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#learning-objectives",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#learning-objectives",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn how to write functions yourself\nLearn how to use a for loop and lapply() to complete repetitive jobs\nLearn how not to loop things that can be easily vectorized\nLearn how to parallelize repetitive jobs using the future_lapply() function from the future.apply package"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#user-defined-function-1",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#user-defined-function-1",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "User-defined Function",
    "text": "User-defined Function\n\nWhen?HowExampleScope 1Scope 2default valueMultiple argumentsExercises\n\n\nIt is beneficial to write your own function when you expect to repeat the same action with different inputs to the action.\n\nExample: mean()\nCalculating the average of an variable is such a common task\n\nYou do not want to do sum(x)/length(x) every time you get a mean\nYou can just use the mean() function\n\nA function is more useful when the task is longer and more complicated.\n\n\nHere is the general structure of a user-defined function:\n\n#--- NOT RUN ---#\nfunction_name &lt;- function(x) {\n\n  1. do something on x\n\n  2. return the results\n\n}\n\n\nThen, you can use the function like this:\n\n#--- NOT RUN ---#\nfunction_name(x)\n\n\nNote: the argument does not have to be named x\n\n\nThe following function takes numeric numbers, square them, and return the squared values:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTry the function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAny objects that are defined within a function are not created on the global environment.\nFor example, squared_a and original_a are defined only internally, and are not registered on the global environment.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can confirm this by looking at the environment tab in RStudio after running the following:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEven though we are returning original_a, only its content is returned.\n\n\nWhen R sees objects that are not provided explicitly as arguments to the function, then R looks for them in the global environment:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere, multiplier is provided as an argument to the function.\nTry this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow, define multiplier on the global environment, and then run it again:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can set default values for function arguments by argument = value like below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTry this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIt is easy to create a function with multiple arguments. You just simply add more arguments within function() like below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you are likely to have noticed, the order of input arguments are assumed to be the same as the order of the arguments of the function. Above,\n\na = 4\nb = 3\n\nYou can mess with the order of input arguments if you want if you name the input arguments as follows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nExercise 1Exercise 2Exercise 3\n\n\nDefine a function that takes temperature in Fahrenheit, convert it into Celsius, and return it.\nHere is the formula: temp_C &lt;- (temp_F - 32) * 5 / 9\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nf_to_c &lt;- function(temp_F) {\n  temp_C &lt;- (temp_F - 32) * 5 / 9\n  return(temp_C)\n}\n\n\n\n\nAfter running a randomized nitrogen trial, you found the following relationship between corn yield (bu/acre) and nitrogen rate (lb/acre):\n\\[\n\\mbox{corn yield} = 120 + 25 \\times log(\\mbox{nitrogen rate})\n\\]\nWrite a function that takes a nitrogen rate as an argument, calculate the estimated yield for the nitrogen rate, and then return the estimated yield.\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nYou would like to calculate the expected revenue as a function of nitrogen rate based on the yield response function.\nWrite a function that takes corn price and nitrogen rate as its arguments, calculate revenue (and yield as an intermediate step), and return revenue. In doing so, use the function your created in Exercise 2.\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ncalc_rev &lt;- function(corn_price, N) {\n  yield &lt;- n_to_yield(N)\n  revenue &lt;- corn_price * yield\n  return(revenue)\n}"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#loop-1",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#loop-1",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Loop",
    "text": "Loop\n\nMotivationsWhat is it?ExampleExercise\n\n\n\nWe sometimes need to run the same process over and over again often with slight changes in parameters.\nIn such a case, it is very time-consuming and messy to write all of the steps one bye one.\nFor example, suppose you are interested in knowing the square of 1 through 5 with a step of 1 ([1,2,3,4,5]). The following code certainly works:\n\n\n1^2 \n2^2 \n3^2 \n4^2 \n5^2 \n\n\nHowever, imagine you have to do this for 1000 integers.\nYes, you don’t want to write each one of them one by one as that would occupy 1000 lines of your code, and it would be time-consuming.\nThings will be even worse if you need to repeat much more complicated processes like Monte Carlo simulations. So, let’s learn how to write a program to do repetitive jobs effectively using loop.\n\n\n\n\nLooping is repeatedly evaluating the same (except parameters) process over and over again.\nIn the example above,\n\nthe same repeated process is the action of squaring\nwhat you square (parameter) changes\n\n\nSyntax\n\n#--- NOT RUN ---#\nfor (x in a_list_of_values){\n  you do what you want to do with x\n} \n\n\n\n\nfor (x in 1:5){\n  print(x^2)\n}  \n\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n\n\n\nThis does the same:\n\nfor (bluh_bluh_bluh in 1:5){\n  print(bluh_bluh_bluh^2)\n}  \n\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n\n\n\n\nWrite a for loop that cubes each element of the sequence of numbers that starts from 5 and increases up to 50 with the incremental step of 5.\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nfor (i in seq(5, 50, by = 5)){\n  i^3\n}"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#looping-with-lapply",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#looping-with-lapply",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Looping with lapply()",
    "text": "Looping with lapply()\n\nInstructionExampledefine a functionmultiple argumentsExercises\n\n\nInstead of using a for loop, we can use the lapply() function from the base package to loop.\n\nSyntax\n\n#--- NOT RUN ---#  \nlapply(A, B) \n\n\nA is the list of values\nB is the function you would like to apply to each of the values in A\n\n\nNote:\n\nA is a vector, lapply() works on each of the vector elements\nA is a list, lapply() works on each of the list elements whatever they may be\nA is a data.frame, lapply() works on each of the columns (data.frame is a list of columns of equal length)\n\n\n\nThis does the same thing as the for loop example we looked at earlier:\n\nlapply(1:5, \\(x){x^2})  \n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 9\n\n[[4]]\n[1] 16\n\n[[5]]\n[1] 25\n\n\n\nThe key difference from a for loop is the object class of the output after the loop.\n Important: the output type of lappy() is always a list (that’s why it is called lapply)\n\n\nIt is often the case that you want to write a function of the action you intend to repeat first and then loop.\nFor example, for the loop of squaring numbers, you can first define a function that implements the action of squaring:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnd then loop:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOften times, you would like to loop over a single parameter of a function that has multiple arguments:\nFor example, you would like to fix the value of b at 5 while trying different values of a of the following function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen you can do this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you can see, this function try each of 1:10 (called internally x), give it to square_them_add() as its first argument while b is fixed at 5.\n\n\n\nExercise 1Exercise 2\n\n\nUse lapply() to cube each element of the sequence of numbers that starts from 5 and increases up to 50 with the incremental step of 5.\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nlapply(seq(5, 50, by = 5), \\(x) x^3) \n\n\n\n\nDefine a function that takes a nitrogen rate and corn price as arguments and calculate revenue. Yield can be estimated using the following equation:\n\\[\n\\mbox{corn yield} = 120 + 25 \\times log(\\mbox{nitrogen rate})\n\\]\nAt each value of the corn price sequence of seq(2.5, 4.0, by = 0.1), calculate the revenue using lapply() where nitrogen rate is fixed at 200 (lb/acre).\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nn_to_yield &lt;- function(N) {\n  yield &lt;- 120 + 25 * log(N)\n  return(yield)\n}\n\ncorn_price_seq &lt;- seq(2.5, 4.0, by = 0.1)\n\nlapply(corn_price_seq, \\(x) n_to_yield(x))"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#looping-over-multiple-variables",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#looping-over-multiple-variables",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Looping over multiple variables",
    "text": "Looping over multiple variables\n\nMotivationsExampleStepsTips to write a function for loopExercise\n\n\n\nThe example we have looked at is a very simple case where a loop is done over a single list of values\nIt is often the case that you want to loop over multiple variables.\n\nExample\nYou are interested in understanding the sensitivity of the profitability of corn production with respect to corn price and nitrogen application rate.\nSo, you would like to loop over two sets of sequences of values:\n\ncorn price\nnitrogen application rate\n\nHow\nThe trick is to\n\ncreate a data.frame of two (or as many variables as you would like to loop over) variables (corn price and nitrogen application rate), which stores all the permutations of the two variables\nthen loop over the rows of the data.frame\n\n\n\n\nWe are interested in understanding the sensitivity of corn revenue to corn price and applied nitrogen amount.\nWe consider\n\nthe range of $3.0/bu to $5.0/bu for corn price\n0 lb/acre to 300/acre for nitrogen rate\n\n\n\n\n\nStep 1Step 2Step 3Step 4\n\n\nGet a sequence of values for corn price and nitrogen rate:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe then create a complete combination of the values using the expand.grid() function, and then convert it to a data.frame object (this is not strictly necessary).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDefine a function that\n\ntakes a row number\nrefer to parameters_data to extract the parameters stored at the row number\ncalculate corn yield and revenue based on the extracted parameters (corn price and nitrogen rate).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis function\n\ntakes i (act as a row number within the function)\nextract corn price and nitrogen from the ith row of parameters_mat\nuse the extracted values to calculate yield and revenue\ncreate a data.frame of the resulting revenue, corn price, and nitrogen rate\nreturns the data.frame\n\n\n\nDo a loop using lapply():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCombine the list of data.frames into a single data.frame using bind_rows() from the dplyr package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nBefore define a function, write a code that works for one row.\nWe will work on a specific value of i. Here is it i = 1.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAfter you confirm the code you write gives you desired outcomes, make it a function by replacing 1 with i.\n\n\nFind the profit of corn production at different price combinations of corn and nitrogen where nitrogen rate is fixed at 200 lb/acre.\n\nStep 1: Define the following sequences of numbers\n\ncorn price: seq(2.5, 4.0, by = 0.05)\nnitrogen price: seq(0.2, 0.6, by = 0.01)\n\nStep 2: Create a data.frame of the complete combinations of the values from the price vectors\nStep 3: Define a function that takes a row number, extract corn price and nitrogen price and then calculate profit based on the price combination using the following equations:\n\n\\[\n\\mbox{corn yield} = 120 + 25 \\times log(\\mbox{nitrogen rate})\n\\]\n\\[\n\\mbox{profit} = \\mbox{corn price} \\times \\mbox{corn yield} - \\mbox{nitrogen price} \\times \\mbox{nitrogen rate}\n\\]\n\nStep 4: loop over the row numbers of the parameter data"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#do-you-really-need-to-loop",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#do-you-really-need-to-loop",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Do you really need to loop?",
    "text": "Do you really need to loop?\n\nWhy not?comparetimevectorize 1vectorize 2compare\n\n\n\nActually, we should not have used a for loop or lapply() in any of the examples above in practice1\nThis is because they can be easily vectorized.\nVectorized operations are those that take vectors as inputs and work on each element of the vectors in parallel\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nVectorized\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNon-vectorized (loop)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCompare\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoth produce the same results. However, R is written in a way that is much better at doing vectorized operations.\n\n\nLet’s time them using the microbenchmark() function from the microbenchmark package.\nHere, we do not unlist() after lapply() to just focus on the multiplication part.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAs you can see, the vectorized version is faster.\nThe time difference comes from R having to conduct many more internal checks and hidden operations for the non-vectorized one\n\n\n\nInstead of this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can just do this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHere is the vectorized version of the revenue sensitivity analysis:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen use the function to calculate revenue and assign it to a new variable in the parameters_data data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLet’s compare the vectorized and non-vectorized version:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#parallel-processing",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#parallel-processing",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Parallel processing",
    "text": "Parallel processing\n\nIntroInstructionPreparationTry itAny faster?What just happened?\n\n\n\nParallelization of computation involves distributing the task at hand to multiple cores so that multiple processes are done in parallel.\nOur focus is on the so called embarrassingly parallel processes.\n\nEmbarrassingly parallel process: a collection of processes where each process is completely independent of any another (one process does not use the outputs of any of the other processes)\n\nThe example of integer squaring is embarrassingly parallel. In order to calculate 12, you do not need to use the result of 22 or any other squares.\nEmbarrassingly parallel processes are very easy to parallelize because you do not have to worry about which process to complete first to make other processes happen.\nFortunately, most of the processes you are interested in parallelizing fall under this category\n\n\n\n\nWe will use the future_lapply() function from the future.apply package for parallelization.\nUsing the package, parallelization is a piece of cake as it is basically the same syntactically as lapply().\n\n\n#--- install the package ---#\ninstall.packages(future.apply) \n\n#--- load packages ---#\nlibrary(future.apply)\n\n\nHow\nYou can simply replace lapply() with future_lapply()!\n\n#--- parallelized ---#\nsq_ls &lt;- lapply(1:1000, function(x) x^2) \n\n#--- not parallelized ---#\nsq_ls_par &lt;- future_lapply(1:1000, function(x) x^2) \n\n\n\nYou can find out how many cores you have available for parallel computation on your computer using the detectCores() function from the parallel package.\n\n#--- number of all cores ---#\nparallel::detectCores()\n\n[1] 20\n\n\n\nBefore we implement parallelized lapply(), we need to declare what backend process we will be using by plan().\n\nplan(multicore, workers = parallel::detectCores() - 1)\n\n\nOther backend processes are:\n\nsequential: this is just a regular loop\nmulticore: forked sessions (not available on Windows)\nmultisession: multiple sessions (less performant thana multicore)\n\nWith the multicore option, R figure out which multicore or multisession should be used (or can be used) and automatically redirect the backend process to the appropriate (available) one.\n\n\n\n\nNote\n\n\nUnless you tell R explicitly to parallelize things (like using future_lapply()), R always uses a single core by default. So, you do not have to change anything manually when you do not want to use multiple cores.\n\n\n\n\n\n\nsq_ls &lt;- future_lapply(1:1000, function(x) x^2)\n\n\n\n\nmicrobenchmark(\n\n  #--- parallelized ---#\n  \"parallelized\" = { sq_ls &lt;- future_lapply(1:1000, function(x) x^2) }, \n\n  #--- non-parallelized ---#\n  \"not parallelized\" = { sq_ls &lt;- lapply(1:1000, function(x) x^2) },\n  times = 100, \n  unit = \"ms\"\n\n) \n\nUnit: milliseconds\n             expr        min         lq       mean      median        uq\n     parallelized 214.475455 252.632071 288.473396 278.4967715 321.18057\n not parallelized   0.579383   0.742785   1.089473   0.8525375   1.15469\n       max neval\n 467.03261   100\n   7.06664   100\n\n\n\n\n\nThis is because communicating jobs to each core takes some time as well.\nSo, if each of the iterative processes is super fast (like this example where you just square a number), the time spent on communicating with the cores outweighs the time saving due to parallel computation.\nParallelization is more beneficial when each of the repetitive processes takes long."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#parallel-processing-a-less-trivial-example",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#parallel-processing-a-less-trivial-example",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Parallel processing: a less trivial example",
    "text": "Parallel processing: a less trivial example\n\nMC simulationMC stepsfunctionperformanceMac/Linux\n\n\n\nOne of the very good use cases of parallelization is MC simulation\nWe will run MC simulations that test whether the correlation between an independent variable and error term would cause bias (yes, we know the answer).\n\n\n\n\ngenerate a dataset (50,000 observations) according to the following data generating process:\n\n\\[\ny = 1 + x + v\n\\]\nwhere + \\(\\mu \\sim N(0,1)\\) + \\(x \\sim N(0,1) + \\mu\\) + \\(v \\sim N(0,1) + \\mu\\).\nThe \\(\\mu\\) term cause correlation between \\(x\\) (the covariate) and \\(v\\) (the error term).\n\nestimate the coefficient on \\(x\\) vis OLS, and return the estimate.\nrepeat this process \\(1,000\\) times to understand the property of the OLS estimators under the data generating process.\n\nThis Monte Carlo simulation is embarrassingly parallel because each process is independent of any other.\n\n\nHere is a function that implements the steps described in the previous slide:\n\n#--- repeat steps 1-3 B times ---#\nMC_sim &lt;- function(i){\n\n  N &lt;- 50000 # sample size\n\n  #--- steps 1 and 2:  ---#\n  mu &lt;- rnorm(N) # the common term shared by both x and u\n  x &lt;- rnorm(N) + mu # independent variable\n  v &lt;- rnorm(N) + mu # error\n  y &lt;- 1 + x + v # dependent variable\n  data &lt;- data.table(y = y, x = x)\n\n  #--- OLS ---# \n  reg &lt;- lm(y~x, data = data) # OLS\n\n  #--- return the coef ---#\n  return(reg$coef['x'])\n}  \n\n\n\nSingle run:\n\ntic()\nsingle_res &lt;- MC_sim(1)\ntoc()\n\n0.013 sec elapsed\n\n\nNot parallelized (sequential):\n\ntic()\nMC_results &lt;- lapply(1:1000, MC_sim)\ntoc() \n\n18.541 sec elapsed\n\n\nParallelized:\n\ntic()\nMC_results &lt;- future_lapply(1:1000, MC_sim)\ntoc() \n\n2.763 sec elapsed\n\n\n\n\n\nFor Mac or Linux users, parallel::mclapply() is just as compelling (or pbmclapply::pbmclapply() if you want to have a nice progress report, which is very helpful particularly when the process is long).\nIt is just as easy to use as future_lapply() because its syntax is the same as lapply().\nYou can control the number of cores to employ by adding mc.cores option. Here is an example code that does the same MC simulations we conducted above:\n\n\n#--- mclapply ---#\nlibrary(parallel)\nMC_results &lt;- mclapply(1:1000, MC_sim, mc.cores = detectCores() - 1)\n\n#--- or with progress bar ---#\nlibrary(pbmclapply)\nMC_results &lt;- pbmclapply(1:1000, MC_sim, mc.cores = detectCores() - 1)"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#low-dimensional-optimization-1",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#low-dimensional-optimization-1",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Low-dimensional optimization",
    "text": "Low-dimensional optimization\n\nsetupgrid searchexampleprofit-Nbest N\n\n\nSuppose you have ran an randomized nitrogen experiment for corn production on a field, collected data, and run a regression to find the following quantitative relationship between corn yield (bu/acre) and nitrogen rate (lb/acre):\n\\[\n\\mbox{corn yield} = 120 + 25 \\times log(\\mbox{nitrogen rate})\n\\]\nYour are interested in finding the best nitrogen rates that maximize profit at different combinations of corn and nitrogen prices for this field.\n\\[\nMax_{N} P_C \\times Y(N) - P_N \\times N\n\\]\n\nN: nitrogen rate (lb/acre)\nY(N): corn yield (bu/acre) as a function of N as described above\nP_C: corn price ($/bu)\nP_N: nitrogen price ($/lb)\n\nHere, N is a decision variable, and P_C and P_N are parameters.\n\n\nGrid search is a very inefficient yet effective tool for finding solutions to optimization problems as long as the dimension of the optimization problem is low (1 or 2 variables).\nGrid search basically evaluates the objective function (profit here) at many levels of the decision variables (nitrogen here) and pick the one that maximizes the objective function (profit).\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLet’s define a function that takes N, P_C, and P_N values and returns profits.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s create a sequence of N values at which we evaluate the profit, and then calculate profit at each level of N.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHere is the visualization of profit-N relationship:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOnce the profit-N relationship is found, we can use filter() combined with max() to identify the optimal N rate.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAlternatively, you can sort the data by profit in the ascending order (default) and pick the last row using slice(n()).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis method is faster than the first one."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#coding-strategy-1-looping",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#coding-strategy-1-looping",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Coding strategy 1: looping",
    "text": "Coding strategy 1: looping\n\nloopStep 1Step 2Step 3\n\n\nNow that you have written codes to find the optimal N at a given combination of corn and nitrogen prices.\nWe can move on to the next step of finding the optimal N rates at many various combinations of corn and nitrogen prices.\nHere is the coding strategy:\n\nDefine a set of all the combinations of corn and nitrogen prices you want to analyze as a data.frame.\nDefine a function that extract corn and nitrogen prices from the parameter data.frame and find the optimal N rate at the given combination of price and nitrogen combination.\nLoop over the set of parameters.\n\n\n\nHere, we define a data.frame of parameters to be explored. We will be looping over the rows of the parameter data.frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNow, we will define a function that extract a combination of corn and nitrogen prices from price_parameters (extract a row from price_parameters), and then find the optimal N.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCheck if this function works:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCombine the list of data.frames into a single data.frame using bind_rows().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#coding-strategy-2-vectorized",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#coding-strategy-2-vectorized",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Coding strategy 2: vectorized",
    "text": "Coding strategy 2: vectorized\n\nvectorizedStep 1Steps 2 and 3\n\n\nInstead of writing a loop like above, we can actually vectorize the process. Here are the steps:\n\nDefine a set of all the combinations of nitrogen rate, corn price, and nitrogen price you want to analyze as a data.frame.\nCalculate profits for all the combinations of nitrogen rate, corn price, and nitrogen price inside the data.frame\nFind the optimal N rate for each of the combinations of nitrogen rate, corn price, and nitrogen price\n\n\n\nHere, we define all the combinations of nitrogen rate, corn price, and nitrogen price you want to analyze as a data.frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNow, we will calculate profit for all the rows in price_parameters.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow, we can identify the optimal N rate at each of the corn and nitrogen combinations:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#which-strategy",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#which-strategy",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Which strategy?",
    "text": "Which strategy?\n\nWhich strategy you should take depends on the size of your computer’s RMA memory.\nGoing over the RAM memory limit will suffocate your computer, which leads to a substantial loss in computing performance.\nVectorized version is more memory-hungry:\n\nStrategy 1: loop over the price combinations (one price combination at a time)\nStrategy 2: loop over price (all the price combinations at the same time)\n\nIf you can fit the entire dataset in the RAM memory, then take Strategy 2. Otherwise, break up the entire task into pieces like Strategy 1.\n\n\n\n\n\nKeep track of RAM memory usage\n\n\n\nMac users: go to .blue[Applications] \\(\\rightarrow\\) .blue[Utilities] \\(\\rightarrow\\) .blue[Activity Monitor]\nWindows users: press Windows Key + R \\(\\rightarrow\\) type “resmon” into the search box"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#optimization-fixed-attribute-combinations",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#optimization-fixed-attribute-combinations",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Optimization (fixed attribute combinations)",
    "text": "Optimization (fixed attribute combinations)\n\nsetupdataStrategy 1Strategy 2\n\n\nSuppose you have ran an randomized nitrogen experiment for corn production on a field, collected data, and run a regression to find the following quantitative relationship between corn yield (bu/acre) and nitrogen rate (lb/acre):\n\\[\n\\mbox{corn yield} = 120 + (EC/40) \\times (1 + slope)\\times 25 \\times log(\\mbox{nitrogen rate})\n\\]\nYou are interested in finding the best nitrogen rates that maximize profit for different parts of the field at a given corn and nitrogen price combination.\n\\[\nMax_{N} P_C \\times [120 + (EC/40) \\times (1 + slope) * 25 \\times log(\\mbox{nitrogen rate})] - P_N \\times N\n\\]\n\nN: nitrogen rate (lb/acre)\nslope: the slope\n\nEC: electrical conductivity\n\nP_C: corn price ($/bu)\nP_N: nitrogen price ($/lb)\n\nHere, N is a decision variable, slope and EC are attributes, and P_C and P_N are parameters.\n\n\nData\nConsider a 2-plot field like below for the sake of tractability:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nObjective\nYou want to find the optimal nitrogen rate for each plot for a give combination of corn and nitrogen prices.\n\n\nYou can expand on all the variables, nitrogen rate (decision variable), slope and EC (attributes), and corn and nitrogen prices (parameters):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou only need the highlighted rows because no plots in this dataset has slope-ec combinations of c(0, 30) and c(0.2, 40)\nYou created unnecessary rows with this approach\n\n\n\nInstead of using expand on all the three vectors using expand.grid(), we can use expand.grid.df() from the reshape package as follows.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you can see, it creates unique complete comninations of the rows from the fisrt and second data.frames. Consequently, it does not create any observations that do not exist in reality.\n\n\n\n\n\n\n\nback to the lecture slides on the course website"
  }
]