---
title: "03-1: Importing Files and Exporting to Files"
abstract: "Chapter 3: Data Wrangling"
format: 
  revealjs: 
    footer: "[back to the lecture slides on the course website](https://tmieno2.github.io/Data-Science-with-R-Quarto/lectures/)"
    theme: [default, ../custom.scss]
    fontsize: 1.2em
    callout-icon: false
    scrollable: true
    echo: true
    fig-dpi: 400
---

```{r}
#| include: false 
library(dplyr)
library(readr)
```


# Importing and Exporting Datasets

<html><div style='float:left'></div><hr color='#EB811B' size=1px width=796px></html>

## Importing and Exporting Datasets

::: {.panel-tabset}
### Objectives and Directions

+ Read datasets in various formats (**csv**, **xlsx**, **dta**, and **rds**) containing corn yields in Nebraska counties for the year of 2008.  

+ Write R objects as files in various formats 

### Directions

+ Go [here](https://github.com/tmieno2/data-science-course-supplementary-datasets) and clone the repository that hosts datasets used in this lecture
+ Install the `tidyverse` and `haven` packages, which we will use later to read/write files.

```{r}
#| eval: false
install.packages(c("tidyverse", "haven"))
```

:::{.callout-note}
The `tidyverse` package does far more than just reading and writing files. We will learn it extensively later.
:::

### How

Check the format in which the dataset is stored by looking at the extension of the file (what comes after the file name and a dot)

+ **corn.csv**: a file format Microsoft Excel supports. 

+ **corn.xlsx**: another format supported by Microsoft Excel, which may have more than one tabs of data sheets. 

+ **corn.dta**: a format that STATA support (software that is immensely popular for economists). 

+ **corn.rds**: a format that R supports.

When you import a dataset, you need to use a particular function that is appropriate for the particular type of format the dataset is in.

:::
<!--end of panel-->

## Read a CSV file

::: {.panel-tabset}

### `read.csv()`

You can use `read.csv()` from the `base` package.

<br>

**Syntax** 

```{r eval = F}
#--- NOT RUN ---#  
data = read.csv(path to the file to import)
```

<br>

**Examples** 

```{r read-data-csv}
corn_yields_df <- read.csv("~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.csv")
```

### `read_csv()`

You can use `read_csv()` from the `readr` package.

<br>

**Syntax** 

```{r eval = F}
#--- NOT RUN ---#  
data = readr::read_csv(path to the file to import)
```

<br>

**Examples** 

```{r, message = F}
corn_yields_tbl <- readr::read_csv("~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.csv")
```

### Compare

<span style="color:red"> Direction:</span> evaluate `corn_yields_df` and `corn_yields_tbl` to see the differences.

<br>

Data read using `read.csv()`:

```{r }
class(corn_yields_df)
```

<br>

Data read using `read_csv()`:

```{r }
class(corn_yields_tbl) 
```

:::
<!--end of panel-->

## Setting the working directory

::: {.panel-tabset} 

### What and why

+ In the previous slide, we provided the full path to the csv file to read onto R.

+ If you expect to import and/or export (save) datasets and R objects often from/to a particular directory, it would be nice to tell R to look for files in the directory **by default**. So, the R code looks more like this:

```{r csv-read, eval = F}
corn_yield <- read.csv("corn_yields.csv")
```

<br>

+ This will save us from writing out the full path every time we either import or export datasets.

+ You can do so by designating the directory as the **working directory**.  

+ Once the working directory is set, R looks for files in that directory unless told otherwise. 

+ It is not just when importing datasets. When you export an R object as a file, R will create a file in the working directory by default.   

### how

You can use `setwd()` to designate a directory as the working directory:

```{r eval = F}
#--- Setting a directory (path) in your computer---#
setwd("/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling")
```

<br>

You can check the current working directory using the `getwd()` function:

```{r }
#--- find the current working directory ---#
getwd()
```

### navigation

Suppose it is convenient for you to set the working directory somewhere else than the folder where all the datasets are residing.

```{r, eval = FALSE}
setwd("~/Dropbox/TeachingUNL/DataScience")
```

<br>

You can then provide the path to the file relative to the working directory like this:

```{r eval = F}
data <- read_csv("Datasets/Chapter_3_data_wrangling/corn_yields.csv")
```

<br>

This is equivalent to:

```{r eval = F}
data <- read_csv("~/Dropbox/TeachingUNL/DataScience/Datasets/Chapter_3_data_wrangling/corn_yields.csv")
```

<br>

You can use `..` to move up a folder. For example, if you want to import **corn_yields.csv** stored in "~/Dropbox/TeachingUNL", then the following works:

```{r eval = F}
data <- read_csv("../corn_yields.csv")
```

### RStudio project

You can create an R Project using RStudio:

+ click on a blue transparent box with a plus sign at the upper left corner of RStudio
+ click on "new directory" (to initiate a new folder) or "existing directory" (to designate an existing folder)

:::{.callout-note title="Let's try"}
+ Create an R project
+ When you open an R Project folder, then the working directory is set at the project folder. Confirm this:

```{r eval = F}
getwd() 
```
:::

:::
<!--end of panel-->


## Read a sheet from an xls(x) file

::: {.panel-tabset} 

### Instruction

+ You can use `read_excel()` from the `readxl` package to read data sheets from an **xls(x)** file, which is part of the `tidyverse` package. 

+ The `readxl` package is installed when you install the `tidyverse` pacakge. 

+ However, it is not loaded automatically when you load the `tidyverse` package. 

+ So, you need to library the package even if you have loaded the `tidyverse` package. 


```{r }
library(readxl)
```

### Syntax and Examples

**Syntax** 

```{r readxls, eval = F}
read_excel(path to the file, sheet = x)
```

+ `x`: sheet number

**Examples** 

Import a sheet of an **xls(x)** file using `read_excel()`:

```{r eval = F}
corn_08 <- read_excel("corn_yields.xls", sheet = 1) # 1st sheet 
corn_09 <- read_excel("corn_yields.xls", sheet = 2) # 2nd sheet
```

```{r echo = F}
corn_08 <- read_excel("~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.xls", sheet = 1)  
```

### Note

```{r }
#--- check the class ---#
class(corn_08) 
```

Notice that the data is converted into a **tibble** (because the `readxl` package is part of the `tidyverse` package.).

:::
<!--end of panel-->

## Read a STATA data file (.dta)

::: {.panel-tabset} 

### Syntax and Examples

Use the `read_dta()` function from the `haven` package.

```{r, eval = FALSE}
#--- load the package ---#
library(haven) 
```

```{r, echo = FALSE}
library(haven) 
```

<br>

**Syntax** 

```{r eval = F}
#--- Syntax (NOT RUN) ---#
haven::read_dta(file path)
```

<br>

**Examples** 

```{r read_dta, eval = FALSE}
#--- import the data ---#
corn_yields <- haven::read_dta("corn_yields.dta")
```

```{r, echo = F}
corn_yields <- haven::read_dta("/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.dta")
```

### Note

```{r }
#--- check the class ---#
class(corn_yields) 
```

Notice that the data is converted into a **data.frame** object, not a **tibble**.

:::
<!--end of panel-->

## Read an **rds** file

::: {.panel-tabset} 

### Instruction

+ An **rds** (<span style="color:red"> r </span><span style="color:red">d</span>ata<span style="color:red"> s</span>et) file is a file type that is supported by R.  

+ You can use the `readRDS()` function to read an **rds** file. 

+ No special packages are necessary.

### Syntax and Examples

**Syntax** 

```{r eval = F}
readRDS("path to the file") 
```

<br>

**Examples** 

```{r read_rds, eval = F}
corn_yields <- readRDS("corn_yields.rds") 
```

```{r, echo = F}
corn_yields <- readRDS("/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.rds")
```

### Note

```{r }
class(corn_yields)
```

<br>

Notice that the imported dataset is already a `tibble` object. This is because the R object exported as **corn_yields.rds** was `tibble`. 

:::
<!--end of panel-->

## Export an R object

::: {.panel-tabset} 

### Instruction

+ Exporting datasets work much the same way as importing them. 

+ Here is the list of functions that let you export a `data.frame` or (`tibble`) in different formats:
  * **csv**: `write_csv()`
  * **dta**: `write_dta()`
  * **rds**: `saveRDS()`
 
### Syntax and Examples

**Syntax** 

```{r eval = F}
export_function(obeject name, file name)
```

<br>

**Examples** 

```{r exp, eval=FALSE}
#--- export as csv ---#
readr::write_csv(corn_yields, "corn_yields_exp_rownames.csv")

#--- export as dta ---#
haven::write_dta(corn_yields, "corn_yields_exp.dta")

#--- export as rds ---#
saveRDS(corn_yields, "corn_yields_exp.rds")

#--- export as xls file ---#
# just don't do it
```

### Notes on RDS

::: {.panel-tabset}

### Object type preservation

You can export any kind of R objects as an **rds** file.

```{r }
a_list <- list(a = c("R", "rocks"), b = corn_yields)   

saveRDS(a_list, "a_list.rds")

readRDS("a_list.rds")
```

As you can see a list is saved as an rds file, and when imported, it is still a list.

### File size

Check the size of the corn data files in different formats. 

Which one is the smallest?

:::
<!--end of panel-->

:::

