---
title: "02-1: Introduction to Quarto"
abstract: "Chapter 2: Quarto"
format:
  revealjs:
    footer: "[back to the lecture slides on the course website](https://tmieno2.github.io/Kobe-Data-Science/lectures/)"
    theme: [default, ../custom.scss]
    fontsize: 1.2em
    callout-icon: false
    scrollable: true
    echo: true
    fig-dpi: 400
filters:
  - webr
---

```{r}
#| include: false 
library(ggplot2)
library(dplyr)
library(here)
```

## Quarto: Introduction

::: {.panel-tabset}
### What is and why Quarto?

+ It allows you to effortlessly generate documents that can print both R codes and their outcomes (this lecture note is indeed written using **Quarto**) in a single document.

+ It is useful when you report the analysis you conducted and its source R codes to your advisor or anyone you report to (as long as that person understands R).

+ The power of Quarto goes well beyond just creating a simple html document. The full power of Quarto is on display [here](https://quarto.org/docs/gallery/).


:::{.callout-note title="Quarto Installation"}
Visit [here](https://quarto.org/docs/get-started/).
:::

###  Using WORD?

+ It would be a real pain to do so because you need to copy and paste all the R codes you run and the results onto WORD **manually**. 
 
+ Often times, copied R codes and results are very much likely to be badly formatted when pasting them

+ Quarto obviates the need of repeating copying and pasting when you would like to communicate what you did (R codes) and what you found (results) without worrying too much about formatting.

### Make a report with Quarto

Generating a report using Quarto is a two-step process:

+ Create an Quarto file (file with .qmd as an extension) with regular texts and R codes mixed inside it. 

  - You use a special syntax to let the computer know which parts of the file are simple texts and which parts are R codes.

+ Tell the computer to process the qmd file (a click of a button on RStudio, or use the `render()` function)

  - The computer runs the R codes and get their outcomes
  - Combine the text parts, R codes, and their results to produce a document



:::
<!--end of panel-->

## Quarto: the Basics

::: {.panel-tabset}


### R code chunks

A qmd file would consist of two types of inputs:

+ R code chunks
+ Regular texts

:::{.callout-important title="Special Syntax"}

We can indicate R codes chunks by placing R codes inside a special syntax.

````{verbatim}
```{r}
codes
```
````
:::

:::{.callout-note title="Direction"}
Take a look at **sample_qmd.qmd**, which can be downloaded from [here](https://www.dropbox.com/scl/fi/3qza1ctgeacjvxz3q2waq/sample_qmd.qmd?rlkey=vtcfgbh6pocqoox6ll2rdrvj2&st=uqz8tsvt&dl=0).

+ R codes `summary(cars)` and `plot(pressure)` are enclosed individually by the special syntax

+ So, in this qmd file, R knows that it should treat them as R codes, but not regular texts. 

+ On the other hand, any texts that are not enclosed by the special syntax would be recognized as regular text.
:::

### Render

The process of compiling an qmd file to produce a document is called **rendering**.

+ The easiest way to render is to hit the **Render** button located at the top of the code pane (upper left pane by default)

:::{.callout-note}
Alternatively, you can use the `render()` function to render like below:

```{r eval = F}
render("sample_qmd.qmd")
```
:::


### qmd v.s. output

Inspect the qmd file and its output document:

::: {.columns}

::: {.column width="50%"}
**qmd side**

1. lines 1-10: a **YAML header** where you control the aesthetics of the output document (more on this later) 
2. line 16: texts not enclosed by the special syntax
3. lines 18-21: `summary(cars)` is an R code, which is enclosed by the special syntax
:::
<!--end of the 1st column-->
::: {.column width="50%"}
**html side**

1. lines 1-10: nothing 
2. line 16: printed as regular texts 
3. lines 18-21: the R code and its results printed
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

### Inline code

You can refer to an R object previously defined in line and display its content in line:

:::{.callout-note title="Direction"}
See lines 41-51 of the qmd file
:::


### Markdown basics

+ header
+ make a list
+ font
+ code highlighting
+ inline math
+ math
+ web link
+ citation

:::{.callout-note title="Direction"}
Compare the chapter called "Markdown basics" of the qmd file and its corresponding output in the rendered html file
:::


### Caveat

+ When you render an qmd file and create a report, R creates an R session/environment that is completely <span style = "color: blue;"> independent </span> of whatever R sessions or environments you may have on your RStudio. 

+ This means that when you render an qmd file, you cannot refer to R objects you have defined on your current R session.
:::
<!--end of panel-->

## Chunk options

::: {.panel-tabset}

### What?

Chunk options are special codes inside R code chunks to control how the code chunks operate.

Here are some example options:

+ `echo`
+ `eval`
+ `message`
+ `warning`
+ `output`
+ `include`
+ `cache`
+ `fig.cap`, `fig-height`, etc

See all the options [here](https://quarto.org/docs/computations/execution-options.html#output-options).

### Example: `echo`

+ Inspect the qmd file and its output document and observe that 

  - From the R code chunk with `summary(cars)`, the code itself and its outcome are presented in the output
  - From the R code chunk with `plot(pressure)`, only its outcome is presented in the output

+ This is because of the chunk option `echo: false` in the second R code chunk

### How

To set a chunk option, use the following syntax:

````{verbatim}
```{r}
#| option-name: choice

R codes come here
```
````

<br>

**Example**

````{verbatim}
```{r}
#| echo: false

R codes come here
```
````

<br>

:::{.callout-important titel=Caveat}
No space between the initiation of an R code chunk and chunk option. For example,  the `echo` chunk option is going to be ignored below:

````{verbatim}
```{r}

#| echo: false

R codes come here
```
````
:::


### Various options

::: {.panel-tabset}

#### `echo` and `eval`

<br>

+ `echo` (<span style="color:red"> true </span> or false): specify whether the R codes appear in the  output document or not

+ `eval` (<span style="color:red"> true </span> or false): specify whether the R codes are evaluated or not

<br>

:::{.callout-note title=Direction}
Inspect the qmd file (lines 75-103) and its output document to see their effects.
:::

#### `message` and `warning`

<br>

+ `message` (true or <span style="color:red"> false </span>): specify weather messages associated with R codes evaluation appear in the output document or not

+ `warning` (true or <span style="color:red"> false </span>): specify weather warnings associated with R codes evaluation appear in the output document or not

<br>

:::{.callout-note title=Direction}
Inspect the qmd file (lines 107-131) and its output document
:::

#### `output`

<br>

`output` (<span style="color:red"> true </span>, false, asis)

+ `true`: pint all the results including warnings and messages
+ `false`: hides all the results including warnings and messages
+ `asis`: the outputs of the R codes are printed as-is without any suitable formatting

<br>

:::{.callout-note title=Direction}
Inspect the qmd file (lines 135-149) and its output document
:::

#### `include`

<br>

`include: false` is equivalent to having `eval: true`, `echo: false`, and `results: false`

<br>

:::{.callout-note title="Direction"}
Inspect the qmd file (lines 153-166) and its output document
:::

#### figure-related

<br>

**Chunk option for figure**

+ `fig.align`: 'default', 'center', 'left', 'right'
+ `fig.width`: in inches
+ `fig.height`: in inches
+ `fig.cap`: figure caption

<br>

:::{.callout-note title="Direction"}
Play with these options. See [here](https://yihui.org/knitr/options/) for more chunk options.
:::


:::
<!--end of panel-->

### Specify chunk options globally

::: {.panel-tabset}

#### What and why?

Sometimes, it is useful to set chunk options that apply globally (for the entire documents).

For example,

+ You are writing a term paper and the instructor may want to see only results, but not R codes.
+ You do not want any of the R codes to appear on the output document, but `echo: true` is the default.
+ It is a waste of time to type `echo: false` for all the R code chunks

#### How

You can set chunk options globally in the YAML header with the `execute` option like below:

````{verbatim}
---
title: "Reporting using Quarto"
author: "Taro Mieno"
format:
  html:
    toc: true
    toc-depth: 2
    number-sections: true
    number-depth: 2
execute:
  echo: false
---
````

:::{.callout-note title=Direction}
+ Insert the following in the YAML header of `sample_qmd.qmd` file so that it looks like above

````{verbatim}
execute:
  echo: false
````

+ Render the qmd file again and then compare lines 35-39 of the qmd file and its corresponding output.
:::

#### Note

:::{.callout-important}
Local option always overrides the global option.
:::

:::
<!--end of panel-->

:::
<!--end of panel-->

## Caching

::: {.panel-tabset}

### What?

+ In the course of creating a document using Quarto, You are going to hit the "Render" button numerous times when you are writing a report to check whether the final output looks fine. 

+ Every time you render, all the R code chunks are evaluated, which is inefficient because R has evaluated those R code chunks before.

+ So, if we can somehow store the results of R code chunks (caching), and then let R call up the saved results instead of re-evaluating the codes all over again, we can save lots of time.

+ The benefit of doing so is greater when the processing time of the codes is longer. Caching can be done by adding `cache==TRUE` as a chunk option. 

+ By adding the option, once an R chunk is processed, its results are saved and can be reused again by R later when you compile the document again. 

### Let's try

:::{.callout-note title=Direction}
+ Change `eval: false` to `eval: true` in the **cache_1** chunk
+ Render and confirm that **sample_qmd_cache** and **sample_qmd_files** folders are created
+ Render again and observe that the rendering process is much faster now
:::

### Changes in codes

When any part of the R codes within a cached R code chunk is changed, R is smart enough to recognize the change and evaluate the R code chunk again without using the cached results for the chunk. 


:::{.callout-note title=Direction}
Change `y = 1 + x + v` to `y = 1 + 2 * x +v` in the **cache_1** chunk and render
:::

### Changes in contents

+ Sometimes, your R codes within an cached R code chunk have not changed, but the content of a dataset used in the R code chunk may have changed. 

+ In such a case, R is unable to recognize the change in the <span style = "color: blue;"> content </span> of the dataset. 

<br>

:::{.callout-note title="Direction"}
+ Change `eval: false` to `eval: true` in the `cache_2` chunk and render
+ Change `y = 1 + 2 * x + v` back to `y = 1 + x +v` and render (notice that the printed number from `cache_2` did not change)
:::


### `dependson`

+ To R, everything in the `cache_2` chunk looks the same as they only look at the code texts, but not the contents of R objects. 
+ Therefore, R would call up the saved results instead of rerunning the R codes, which is not what you want.
+ You can use the `dependson` option to make R recognize any changes in cached R objects 

:::{.callout-note title=Direction}
Add `dependson: cache_1` to the `cache_2` chunk as an option and render again.
:::

:::
<!--end of panel-->

## Directory

::: {.panel-tabset}
### Reading Files

Suppose you are interested in reading a dataset file like this:

```{r eval = F}
read.csv("corn_price.csv")
```

<br>

:::{.callout-important}
By default, R looks for **corn_price.csv** in the same folder in which the qmd file is located. 
:::

<br>

+ In my case, the sample_qmd.qmd is located in <span style = "color: blue;"> `r here::here("Chapter-2-Quarto")` </span>.

+ This means that RStudio tries to find  <span style = "color: blue;"> `r here::here("Chapter-2-Quarto", "corn_price.csv")`</span>.

+ If the file is not in the directory, RStudio won't be able to find the file to import and returns an error. Clearly, all the subsequent actions dependent on the dataset will not run.

### What to do?

To avoid errors in reading files, there are three options:

<br>

**Option 1** (recommended for a beginner)

Put all the datasets you intend to use in the same directory in which your qmd file is located.

<br>

**Option 2**

If the file is not in the directory, supply the full path to the file like this

```{r eval = F}
read.csv("~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Chapter-2-Quarto/corn_price.csv")
```

<br>

**Option 3**

Tell R to look for a specific directory for datasets by setting a working directory using `opts_knit$set(root.dir = directory)` at the beginning by adding the code like below in your qmd file after the YAML header:


````{verbatim}
```{r}
knir::opts_knit$set(root.dir = "~/Dropbox/TeachingUNL/Data-Science-with-R/Chapter-2-Quarto")
```
````
:::
<!--end of panel-->

## Output types

::: {.panel-tabset}

### Various formats

You can render an qmd file to various formats using various engines (visit [here](https://quarto.org/docs/output-formats/all-formats.html) to see all the document types).

![](document-options)

:::{.callout-important}
+ In this course, we only use the html option. Submit your assignment in html. 
+ html is void of the concept of **page**. Consequently, you do not have to worry about how you should organize texts, tables, and figures within a page (fixed amount of space).
:::


### How

**Step 1** 

To write to an output type you want, first add an appropriate options under the `format` option to the YAML header like below.

````{verbatim}
title: "Reporting using Quarto"
author: "Taro Mieno"
format:
  html:
    toc: true
    toc-depth: 2
    number-sections: true
    number-depth: 2
  docx: default 
  typst:  
    papersize: a5
    margin:
      x: 1cm
      y: 1cm
    columns: 2
````

Here, 

+ WORD (with `word` option) is generated with the default options. 
+ PDF (with `typst` option) is generated with the options specified below `typst:`.

:::{.callout-note title=Direction}
Add the docx option and typst options in the YAML above to your qmd file.
:::

<br>

**Step 2**

You should see a downward triangle right to the "Render" button. Pick one format to render to a document of the format.

### Note

YAML and chunk options available are different based on the output format and engine. Visit [here](https://quarto.org/docs/reference/formats/html.html) to see the options specific to particular formats.
:::
<!--end of panel-->

## Resources

The best resource to learn Quarto is its official website:

+ [General and specific (to document type) syntax](https://quarto.org/docs/guide/)
+ [YAML options specific to document type](https://quarto.org/docs/reference/)