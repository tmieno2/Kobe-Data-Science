---
title: "08-1: Making Tables with `flextable`"
abstract: "Chapter 8: Make Tables"
format:
  revealjs:
    footer: "[back to the lecture slides on the course website](https://tmieno2.github.io/Kobe-Data-Science/lectures/)"
    theme: [default, ../custom.scss]
    fontsize: 1.2em
    callout-icon: false
    scrollable: true
    echo: true
    fig-dpi: 400
webr:
  packages: ['dplyr', 'ggplot2', 'gt', 'flextable', 'officer', 'tidyr']
  cell-options:
    editor-font-scale: 0.7
filters:
  - webr
---

## Tips to make the most of the lecture notes

```{r}
#| include: false
library(gt)
library(dplyr)
library(tidyr)
library(flextable)
library(officer)
library(flipbookr)
```

::: {.panel-tabset}

### Interactive navigation tools

+ Click on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want

+ Hit letter "o" on your keyboard and you will have a panel view of all the slides

### Running and writing codes

+ The box area with a hint of blue as the background color is where you can write code (hereafter referred to as the "code area").
+ Hit the "Run Code" button to execute all the code inside the code area.
+ You can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).
+ If you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.
+ You can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code.

:::
<!--end of panel-->
# Create tables with the `flextable` package 

<html><div style='float:left'></div><hr color='#EB811B' size=1px width=1000px></html>

```{r }
#| label: taste-flextable
#| cache: false
#| include: false 
head(mtcars, 20) %>% #BREAK
  select(am, carb, gear, mpg, drat) %>% #BREAK
  flextable() %>% #BREAK
  theme_vanilla() %>% #BREAK 
  set_header_labels(mpg = "miles per gallon") %>% #BREAK 
  autofit() %>% #BREAK 
  merge_v(j = c("am", "carb")) %>% #BREAK 
  italic(j = 1) %>% #BREAK 
  bg(bg = "#C90000", part = "header") %>% #BREAK 
  color(color = "blue", j = 5) %>% #BREAK 
  color(color = "red", i = 5:10, j = 2) %>% #BREAK 
  color(color = "white", part = "header") %>% #BREAK 
  bold(~ drat > 3.2, ~ gear, bold = TRUE) %>% #BREAK 
  align(j = 1) %>% #BREAK
  fontsize(i = 12:18, size = 8) %>% #BREAK
  add_footer_row(values = "blah blah", colwidths = 5) %>% #BREAK
  border_outer(fp_border(color="red", width = 2)) %>% #BREAK 
  line_spacing(space = 1.5) %>% #BREAK
  theme_tron()
```

`r chunk_reveal(
  chunk_name = "taste-flextable", 
  title = "Taste of the flextable package",
  break_type = "user", 
  display_type = "both", 
  left_assign = FALSE,
  platform = "quarto",
  lcolw = "50",
  rcolw = "50"
  )
`

## Create table and modify Parts

::: {.panel-tabset}

### Instruction

Install the following packages and library them.

```{r eval = F}
#--- install if you have not ---#
install.packages("flextable")
install.packages("officer")

#--- library ---#
library(flextable)
library(officer)
```

### Data Preparation

```{r}
#--- Define regions ---#
Australasia <- c("AU", "NZ")
Melanesia <- c("NC", "PG", "SB", "VU")
Polynesia <- c("PF", "WS", "TO", "TV")

#--- create a dataset ---#
(
tab_data <- 
  countrypops %>%
  filter(country_code_2 %in% c(
    Australasia, Melanesia, Polynesia
  )) %>%
  filter(year %in% c(1995, 2005, 2015)) %>%
  mutate(region = case_when(
    country_code_2 %in% Australasia ~ "Australasia",
    country_code_2 %in% Melanesia ~ "Melanesia",
    country_code_2 %in% Polynesia ~ "Polynesia",
  )) %>%
  pivot_wider(
    values_from = population,
    names_from = year,
    names_prefix = "y_"
  ) %>%
  arrange(region, desc(y_2015)) %>%
  select(-starts_with("country_code")) %>%
  mutate(
    pop_ratio_10_15 = y_2015 / y_2005,
    date = "2013-11-14"
  )
)
```


### Initiate a table

::: {.panel-tabset}

#### How

We can apply `flextable()` to a `data.frame` to initiate a table:

```{r eval = F}
flextable(
  tab_data, 
  col_keys = 
    c(
      "country_name",
      "lufhierh",
      "region",
      "y_1995",
      "y_2005"
    )
 )
```

where `col_keys` are the list of the name of the variables from the `data.frame` (providing variable names that do no exist in the dataset creates blank columns) 

#### Example

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
flextable(
  tab_data,
  col_keys = 
    c(
      "country_name", 
      "lufhierh", 
      "region", 
      "y_1995", 
      "y_2005"
    )
)
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
flextable(
  tab_data,
  col_keys = c("country_name", "lufhierh", "region", "y_1995", "y_2005")
)
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->



:::
<!--end of panel-->

:::
<!--end of panel-->

## Selector

::: {.panel-tabset}

### Instruction

Many functions let you choose specifically where you apply changes. Those functions have 

+ `i` for selecting rows 
  * formula 
  * integer vector 
  * logical vector
+ `j` for selecting columns
  * formula
  * character vector
  * integer vector

You can use any combinations of the reference methods for `i` and `j`.

### Preparation

We will be building on `ft` created below:
 
::: {.columns}

::: {.column width="50%"}
```{r}
ft <-
  tab_data %>% 
  flextable(
    col_keys = 
      c(
        "country_name",
        "region",
        "y_1995",
        "y_2005"
      )
  ) 
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft 
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->


### i, j: formula

**Syntax**

```{r eval = F}
function(
  i = ~ condition based on variables,
  j = ~ vairable 1 + variable 2 + ...,
  .
)
```

<br>

**Example**

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>%
  color(
    i = ~ y_2005 > 2e5,
    j = ~ country_name + region,
    color = "red"
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>% 
  color(
    i = ~ y_2005 > 2e5,
    j = ~ country_name + region,
    color = "red"
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->



### i, j: integer, character

Using a character vector for `j` is not recommended because using a formula involves less typing.

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>%
  color(
    i = c(2, 4:9),
    j = c("country_name", "y_1995"),
    color = "red"
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>%
  color(
    i = c(2, 4:9),
    j = c("country_name", "y_1995"),
    color = "red"
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

### i, j: logical, integer

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>% 
  color(
    i = rep(c(TRUE, FALSE), each = 5),
    j = c(1, 3),
    color = "red"
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>% 
  color(
    i = rep(c(TRUE, FALSE), each = 5),
    j = c(1, 3),
    color = "red"
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->


### by parts

You can refer to parts of the table using `part =` option. The available options are

+ `header`: the header part of the table
+ `footer`: the footer part of the table
+ `body`: the body part of the table
+ `all`: the body and the header parts of the table

<br>

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
tab_data %>% 
  flextable(
    col_keys = c("country_name", "region", "y_1995", "y_2005")
  ) %>% 
  color(
    part = "header",
    color = "red"
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
tab_data %>% 
  flextable(
    col_keys = c("country_name", "region", "y_1995", "y_2005")
  ) %>% 
  color(
    part = "header",
    color = "red"
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

Different functions have different default values for `part`.

:::
<!--end of panel-->

## Style

::: {.panel-tabset}

### Introduction

You can use the `style()` function to change the style and format of a table.  

**Syntax**

```{r eval = F}
style(
  x,
  i = NULL,
  j = NULL,
  pr_t = NULL,
  pr_p = NULL,
  pr_c = NULL,
  part = "body"
)
```

We can use `fp_*()` functions from the `officer` package to specify the style of **texts**, **paragraphs**, and **cells**.

+ `pr_t = fp_text()`: format texts 
+ `pr_p = fp_par()`: format paragraphs
+ `pr_c = fp_celll()`: format cells

(`pr` in `pr_* =`  stands for property.)


### `fp_text()`

::: {.panel-tabset}
#### Introduction

`fp_text()` lets you update the appearance of texts, including color, font size, bold or not, etc (see the help page below for the complete list of options).

<br>

**Syntax**

```{webr-r}
?fp_text
```

#### Example 

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>% 
  style(
    i = 4:6,
    j = ~ country_name,
    pr_t = 
      fp_text(
        color = "red",
        bold = TRUE,
        underlined = TRUE
      )
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>% 
  style(
    i = 4:6,
    j = ~ country_name,
    pr_t = 
      fp_text(
        color = "red",
        bold = TRUE,
        underlined = TRUE
      )
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->


:::
<!--end of panel-->

### paragraph vs cell

+ `paragraphs`: rectangular boxes around the texts inside the cells 
+ `cells`: rectangular boxes that contain paragraphs and texts inside 

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>% 
  style(
    pr_p = fp_par(
      border.bottom = fp_border(width = 2, color = "blue")
    ),
    pr_c = fp_cell(
      border.bottom = fp_border(width = 2, color = "red")
    )
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>% 
  style(
    pr_p = fp_par(
      border.bottom = fp_border(width = 2, color = "blue")
    ),
    pr_c = fp_cell(
      border.bottom = fp_border(width = 2, color = "red")
    )
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->


### `fp_par()`

::: {.panel-tabset}

#### Introduction

`fp_paragraph()` lets you update the appearance of paragraphs (see the help page below for the complete list of options).

<br>

**Syntax**

```{webr-r}
?fp_par
```

#### Example

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>% 
  style(
    i = 4:6,
    j = ~ country_name,
    pr_p = fp_par(
      text.align = "left",
      shading.color = "grey"
    )
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>% 
  style(
    i = 4:6,
    j = ~ country_name,
    pr_p = fp_par(
      text.align = "left",
      shading.color = "grey"
    )
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

:::
<!--end of panel-->

### `fp_cell()`

::: {.panel-tabset}
#### Introduction

`fp_cell()` lets you update the appearance of cells (see the help page below for the complete list of options).

<br>

**Syntax**

```{r}
?fp_cell
```

#### Example

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>% 
  style(
    i = 4:6,
    j = ~ country_name,
    pr_c = fp_cell(
      margin = 2,
      vertical.align = "top",
      background.color = "red"
    )
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>% 
  style(
    i = 4:6,
    j = ~ country_name,
    pr_c = fp_cell(
      margin = 2,
      vertical.align = "top",
      background.color = "red"
    )
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

:::
<!--end of panel-->

:::
<!--end of panel-->

## Formatting: convenience functions 

::: {.panel-tabset}

### Instruction

+ Instead of using the `style()` function in combination with `fp_*()` functions, you can easily work on a specific aesthetic feature using convenience functions like below:
  * `align()`, `align_text_col()`, `align_nottext_col()`: Set text alignment
  * `bg()`: Set background color
  * `font()`: Set font
  * `fontsize()`: Set font size
  * `italic()`: Set italic font
  * `bold()`: Set bold font
  * `color()`: Set font color
  * `padding()`: Set paragraph paddings
  * `valign()`: Set vertical alignment
  * `rotate()`: rotate cell text
  * `empty_blanks()`: make blank columns as transparent

+ You can use the selector syntax to specify where the specified effects take place

### Example

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>%
  color(
    i = 1,
    j = 2,
    "#fcba03"
  ) %>%
  bg(
    i = ~ y_2005 < 2e5,
    j = c("region"),
    bg = "grey"
  ) %>%
  fontsize(
    i = 7,
    size = 16
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>%
  color(i = 1, j = 2, "#fcba03") %>%
  bg(i = ~ y_2005 < 2e5, j = c("region"), bg = "grey") %>%
  fontsize(i = 7, size = 16)
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->


:::
<!--end of panel-->

```{r format-flip, cache = F, include = F}
tab_data %>% #BREAK 
  flextable(
    col_keys = c("country_name", "region", "y_1995", "y_2005")
  ) %>% #BREAK 
  #--- text color ---#
  color(i = 1, j = 2, "#fcba03") %>% #BREAK 
  #--- background ---#
  bg(i = ~ y_2005 < 2e5, j = c("region"), bg = "grey") %>% #BREAK 
  #--- font type ---#
  font(i = 5, j = ~ country_name + y_2005, fontname = "Times") %>% #BREAK 
  #--- font size ---#
  fontsize(i = 7, size = 16) %>% #BREAK 
  #--- italicize ---#
  italic(j = 2) %>% #BREAK 
  #--- bold ---#
  bold(j = 4) %>% #BREAK 
  #--- vertical text alignment ---#
  valign(i = ~ region == "Australasia", j = 4, valign = "top") %>% #BREAK 
  #--- text direction ---#
  rotate(i = 1, j = 2, rotation = "tbrl") 

```

`r chunk_reveal(
  chunk_name = "format-flip", 
  title = "Demonstration: Formatting",
  break_type = "user", 
  display_type = "both", 
  left_assign = FALSE,
  platform = "quarto",
  lcolw = "50",
  rcolw = "50"
  )
`

## Borders: convenience functions  

::: {.panel-tabset}

### List of functions

Here is a list of convenience functions that you can use to draw border lines on a table:

+ `hline()`: set horizontal borders
+ `hline_bottom()`: set bottom horizontal border
+ `hline_top()`: set top horizontal border
+ `vline()`: set vertical borders
+ `vline_left()`: set flextable left vertical borders
+ `vline_right()`: set flextable right vertical borders
+ `border()`: Set cell borders
+ `border_inner()`: set vertical & horizontal inner borders
+ `border_inner_h()`: set inner borders
+ `border_inner_v()`: set vertical inner borders
+ `border_outer()`: set outer borders
+ `border_remove()`: remove borders
+ `fix_border_issues()`: fix border issues when cell are merged

### Instruction

+ Use the selector syntax to specify where
+ Use the `border = ` option along with `fp_border()` from the `officer` package to specify what kind of borders you would like to draw

**Example**

```{r eval = F}
hline(
    i = 3, 
    j = 1:3, 
    border = fp_border( 
      color = "red", 
      style = "dotted", 
      width = 4 
    ) 
  ) 
```


### `fp_border()`


::: {.panel-tabset}

#### Introduction

`fp_border()` lets you specify the aesthetics of the borders you are drawing.

<br>

**Syntax**

```{webr-r}
?fp_border
```
#### Example

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>%
  hline(
    i = 3, 
    j = 1:3, 
    border = fp_border(
      color = "red",
      style = "dotted",
      width = 4
    )
  ) 
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>%
  hline(
    i = 3, 
    j = 1:3, 
    border = fp_border(
      color = "red",
      style = "dotted",
      width = 4
    )
  ) 
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

:::
<!--end of panel-->

:::
<!--end of panel-->

```{r borders-f}
#| cache: false
#| include: false
tab_data %>% #BREAK 
  flextable(
    col_keys = c("country_name", "region", "y_1995", "y_2005")
  ) %>% #BREAK 
  #--- remove all borders ---#
  border_remove() %>% #BREAK
  #--- horizontal lines ---#
  hline(i = 3, j = 1:3, border = fp_border(color = "red")) %>% #BREAK 
  #--- horizontal line at the bottom ---#
  hline_bottom(j = 3:4, border = fp_border(color = "green")) %>% #BREAK 
  #--- horizontal line at the top ---#
  hline_top(j = 1:3, border = fp_border(color = "orange")) %>% #BREAK 
  #--- vertical lines ---#
  vline(border = fp_border(color = "orange")) %>% #BREAK 
  #--- vertical on the left edge  ---#
  vline_left(border = fp_border(color = "grey", width = 2)) %>% #BREAK 
  #--- vertical on the right edge  ---#
  vline_right(border = fp_border(color = "red", width = 2)) %>% #BREAK 
  #--- borders of individual cells ---#
  border(i = 4, j = 2, 
    border.top = fp_border(color = "red", width = 3),
    border.left = fp_border(color = "green", width = 3),
    border.right = fp_border(color = "black", width = 3),
    border.bottom = fp_border(color = "pink", width = 3)
  ) %>% #BREAK 
  #--- horizontal lines (inner) ---#
  border_inner_h(border = fp_border(color = "black")) %>% #BREAK 
  #--- vertical lines (inner) ---#
  border_inner_v(border = fp_border(color = "black")) %>% #BREAK 
  border_remove() %>% #BREAK 
  #--- the outer lines ---#
  border_outer(border = fp_border(color = "red", width = 4)) 
```

`r chunk_reveal(
  chunk_name = "borders-f", 
  title = "Demonstration: Borders",
  break_type = "user", 
  display_type = "both", 
  left_assign = FALSE,
  platform = "quarto",
  lcolw = "50",
  rcolw = "50"
  )
`

## Headers and footers 

::: {.panel-tabset}

### `add_*_row()`

::: {.panel-tabset}

#### Instruction

You can use these functions to add a row to the top or the bottom of a table:

+ `add_header_row()`
+ `add_footer_row()`

<br>

**Syntax**

```{r eval = F}
add_*_row(flextable, 
  values = vector of characters, 
  colwidths = vector of integers 
)
```

<br>

**Example**

```{r eval = F}
add_header_row(
  values = c("3-column label", "1-column label"),
  colwidths = c(3, 1)
)
```

This code would insert a row where "3-column label" spans for three columns and "1-column label" spans for one column.

<br>

:::{.callout-note}
You might want to use `footnote()` to create footnotes instead of `add_footer_rows`, as it allows you to generate reference symbols at the same time.
:::
  
#### Example

```{r}
ft %>% 
  add_header_row(
    values = c("3-column label", "1-column label"),
    colwidths = c(3, 1)
  ) %>% 
  align(align = "center", part = "header") %>% 
  autofit() %>% 
  add_footer_row(
    values = "4-column footnote, which is made longer to show it spans across the entire columns.",
    colwidths = 4
  )
```
:::
<!--end of panel-->


### `footnote()`

::: {.panel-tabset}

#### Introduction

**Explanation**

`footnote()` lets you add footnotes with reference symbols for each of them. 

<br>

**Syntax**

```{webr-r}
?footnote
```

#### Example

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>%
  footnote(
    i = 1, j = 1:2, part = "header",
    value = as_paragraph(
      c(
        "This is footnote 1",
        "This is footnote 2"
      )
    ),
    ref_symbols = c("++", "**")
  )
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>%
  footnote(
    i = 1, j = 1:2, part = "header",
    value = as_paragraph(
      c(
        "This is footnote 1",
        "This is footnote 2"
      )
    ),
    ref_symbols = c("++", "**")
  )
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->


+ `n`th element in `value` is associated with `n`th value in `ref_symbols`
+ use `as_paragraph(c())` for `value`

:::
<!--end of panel-->


### `set_header_labels()`

`set_header_labels()` lets you re-label existing header labels using a named list.

<br>

**Syntax**

```{r eval = F}
set_header_labels(
  values = list( 
    existing name 1 = "new name 1", 
    existing name 2 = "new name 2" 
  )
)
```

<br>

**Example**

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>%
  set_header_labels(
    values = list(
      country_name = "Country Name",
      region = "Region"
    )
  ) %>% 
  autofit() 
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>%
  set_header_labels(
    values = list(
      country_name = "Country Name",
      region = "Region"
    )
  ) %>% 
  autofit() 
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

### `delete_part()`

::: {.panel-tabset}

#### How

**Syntax**

```{r eval = F}
delete_part(flextable, part = "header")
```

<br>

The default is to delete the header.

**Example**

::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
ft %>% 
  delete_part()
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r}
#| echo: false
ft %>% 
  delete_part()
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

#### Note

You can still (or have to) use the original variable names from the dataset for selectors even after you deleter the header:

```{r }
tab_data %>%  
  flextable(
    col_keys = c("country_name", "region", "y_1995", "y_2005")
  ) %>% 
  delete_part() %>% 
  hline(
    i = 3, 
    j = ~ country_name + region, 
    border = fp_border(color = "red", style = "dotted", width = 4 
    ) 
  )  
```

:::
<!--end of panel-->

:::
<!--end of panel-->

## Layout

::: {.panel-tabset}

### Instruction

**List of functions**

Here is a list of functions you can use to change the layout of a table:

+ `merge_at()`: Merge flextable cells into a single one
+ `merge_h()`: Merge flextable cells horizontally
+ `merge_h_range()`: rowwise merge of a range of columns
+ `merge_v()`: Merge flextable cells vertically
+ `height()`, `height_all()`: Set flextable rows height
+ `width()`: Set flextable columns width
+ `hrule()`: Set flextable rule for rows heights
+ `autofit()`: Adjusts cell widths and heights
+ `fit_to_width()`: fit a flextable to a maximum width
+ `as_grouped_data()`: grouped data transformation


Use the selector syntax to specify where just like the other functions we have seen. We will look at `merge_v()`, `autofit()`, and `width()`. 

<br>

:::{.callout-note}
I have not encountered cases where I need to merge cells horizontally. It works in a similar manner to the way `merge_v()` works except that it works on rows instead of columns.
:::

### `merge_v()`

`merge_v()` merges vertically the adjacent cells with the same values. It does not accept `i` (rows) argument.

::: {.columns}

::: {.column width="50%"}
**Before**

```{r }
ft 
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
**After**

```{r }
ft %>%  merge_v(j = ~ region)
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

### `autofit()`

`autofit()` adjust the height and width of cells .

::: {.columns}

::: {.column width="50%"}
**Before**

```{r}
tab_data %>%
  mutate(country_name = ifelse(country_name == "Australia", "super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh", country_name)) %>% 
  flextable(
    col_keys = c("country_name", "region", "y_1995", "y_2005")
  ) %>% 
  merge_v(j = ~ region)
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
**After**

```{r }
tab_data %>%
  mutate(country_name = ifelse(country_name == "Australia", "super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh", country_name)) %>% 
  flextable(
    col_keys = c("country_name", "region", "y_1995", "y_2005")
  ) %>% 
  merge_v(j = ~ region) %>% autofit()
```

It adjusted the width of the 1st column so that more texts are displayed in a single row. But, the width of the entire table does not go over the limit of the paper.
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

### `width()`

`width()` set the width of columns to the length you specify.

::: {.columns}

::: {.column width="50%"}
**Before**

```{r}
ft %>%
  autofit()
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
**After**

```{r}
ft %>% 
  autofit() %>% 
  width(j = ~ country_name, width = 1)
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

:::
<!--end of panel-->


## Output 

::: {.panel-tabset}

### Introduction

We can save the table in various formats.

+ `save_as_docx()`: docx (WORD)
+ `save_as_pptx()`: pptx (Power Point)
+ `save_as_image()`: image (png, pdf, jpeg) with help from the `webshot2` package

Let's create a table for demonstration:

```{webr-r}
#| autorun: true
table_tmep <- 
  tab_data %>%  
  flextable(col_keys = c("country_name", "region", "y_1995", "y_2005")) 
```+i

### Word or Power Point

**WORD**

```{r word, eval = F}
save_as_docx(table_tmep, path = "temp_table.docx")
```

<br>

**Power Point**

```{r power-point, eval = F}
save_as_pptx(table_tmep, path = "temp_table.pptx")
```

### Image

I do not really recommend this option. It is hard to configure the output. 

First install the `webshot2` package.

```{r eval = F}
#--- install ---#
remotes::install_github("rstudio/webshot2") 

#--- library ---#
library(webshot2)
```

<br>

**png**

```{r eval = F}
save_as_image(table_tmep, path = "temp_table.png") 
```

<br>

**pdf**

```{r eval = F}
save_as_image(table_tmep, path = "temp_table.pdf", zoom = 10, webshot = "webshot2") 
```
:::
<!--end of panel-->
